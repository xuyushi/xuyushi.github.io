<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Xu Yushi Blog]]></title>
  <subtitle><![CDATA[低调、务实、自驱、反思]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com//"/>
  <updated>2016-02-03T03:47:28.000Z</updated>
  <id>http://yoursite.com//</id>
  
  <author>
    <name><![CDATA[Xu Yushi]]></name>
    <email><![CDATA[xmy166@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2016/02/03/hello-world/"/>
    <id>http://yoursite.com/2016/02/03/hello-world/</id>
    <published>2016-02-03T03:47:28.000Z</published>
    <updated>2016-02-03T03:47:28.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[状态模式State Design Pattern]]></title>
    <link href="http://yoursite.com/2016/02/01/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/02/01/状态模式/</id>
    <published>2016-02-01T07:12:00.000Z</published>
    <updated>2016-02-03T03:45:12.000Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="状态模式_State_Design_Pattern">状态模式 State Design Pattern</h1><h2 id="定义">定义</h2><h2 id="目的">目的</h2><ul>
<li>根据不同的状态，采取不同的行为</li>
<li>允许一个对象在其内部状态改变的时候改变其行为。这个对象看上去就像是改变了它的类一样</li>
</ul>
<h2 id="优点">优点</h2><ul>
<li>减少了 if else，switch 语句的复杂程度 </li>
<li>增加新的状态和逻辑时，便于修改</li>
</ul>
<h2 id="缺点">缺点</h2><ul>
<li>类的种类增加<br>*</li>
</ul>
<h2 id="步骤">步骤</h2><ol>
<li>定义一个 <code>context</code> 类，来给外接提供一个接口</li>
<li>定义一个 <code>state</code> 基类</li>
<li>根据<code>state</code> 状态，派生定义其他的不同状态类</li>
<li>在派生<code>state</code> 中，定义不同的行为</li>
<li>在<code>context</code>中持有一个当前 <code>state</code>的变量</li>
<li>改变<code>context</code>中的<code>state</code>状态</li>
</ol>
<a id="more"></a>
<h2 id="适用场景">适用场景</h2><ol>
<li>对象的行为取决于当前的状态</li>
<li>代码中包含大量的与对象状态有关的条件语句。状态模式将每一个条件分支放入一个独立的<code>state</code>类中。</li>
</ol>
<h2 id="结构">结构</h2><ul>
<li><code>context</code>中定义客户端所感兴趣的接口，并持有一个状态类的实例，表示类当前的状态</li>
<li><code>state</code>中定义一个接口，用以封装<code>context</code>中对象的一个特定的状态所对应的行为</li>
<li>具体状态实现了<code>state</code>中所需要动作的具体行为（可以不实现，那么那个行为保持<code>state</code>中的行为）</li>
</ul>
<p><strong>UML 图</strong></p>
<p><img src="http://7xqcjz.com1.z0.glb.clouddn.com/2016-02-01-14543092051479.png" alt=""></p>
<h2 id="例子">例子</h2><h3 id="context_类">context 类</h3><ul>
<li>其中定义了两个方法 <code>goNext</code> <code>goPre</code>，分别调用当前状态中的<code>next</code> <code>pre</code>方法</li>
<li>复写了<code>toString</code>方法，便于观察结果</li>
<li>在构造函数中初始化当前的<code>state</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.xuyushi.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by xuyushi on 16/1/29.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wrapper</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.next(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goPre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state.pre(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"now state is "</span>+ state.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="state_基类">state 基类</h3><ul>
<li>定义了<code>next</code> <code>pre</code>方法，子类可以不用复写全部的方法，所以在父类中要做相应的处理，也可以抛出异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.xuyushi.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by xuyushi on 16/1/29.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">(Wrapper wrapper)</span> </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"error"</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">(Wrapper wrapper)</span> </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"error"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 具体实现类</span><br><span class="line">* A 状态只复写 next 方法</span><br><span class="line">* B 状态复写 next 和 pre方法</span><br><span class="line">* C 状态只复写 pre 方法</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">package</span> io.github.xuyushi.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by xuyushi on 16/1/29.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateA</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">(Wrapper wrapper)</span> </span>&#123;</span><br><span class="line">        wrapper.setState(<span class="keyword">new</span> StateB());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.xuyushi.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by xuyushi on 16/1/29.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateB</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">(Wrapper wrapper)</span> </span>&#123;</span><br><span class="line">        wrapper.setState(<span class="keyword">new</span> StateC());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">(Wrapper wrapper)</span> </span>&#123;</span><br><span class="line">        wrapper.setState(<span class="keyword">new</span> StateA());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.xuyushi.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by xuyushi on 16/1/29.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateC</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">(Wrapper wrapper)</span> </span>&#123;</span><br><span class="line">        wrapper.setState(<span class="keyword">new</span> StateA());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="客户端使用">客户端使用</h3><p>每次改变状态之后打印当前状态</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.xuyushi.state;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by xuyushi on 16/1/29.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"StateMain RUNNING"</span>);</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">        Wrapper wrapper = <span class="keyword">new</span> Wrapper(<span class="keyword">new</span> StateA());</span><br><span class="line">        System.out.println(wrapper.toString());</span><br><span class="line">        wrapper.goPre();</span><br><span class="line">        System.out.println(wrapper.toString());</span><br><span class="line">        wrapper.goNext();</span><br><span class="line">        System.out.println(wrapper.toString());</span><br><span class="line">        wrapper.goNext();</span><br><span class="line">        System.out.println(wrapper.toString());</span><br><span class="line">        wrapper.goNext();</span><br><span class="line">        System.out.println(wrapper.toString());</span><br><span class="line">        wrapper.goNext();</span><br><span class="line">        System.out.println(wrapper.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>log</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">StateMain RUNNING</span><br><span class="line">now state is io.github.xuyushi.state.StateA</span><br><span class="line">error</span><br><span class="line">now state is io.github.xuyushi.state.StateA</span><br><span class="line">now state is io.github.xuyushi.state.StateB</span><br><span class="line">now state is io.github.xuyushi.state.StateC</span><br><span class="line">error</span><br><span class="line">now state is io.github.xuyushi.state.StateC</span><br><span class="line">error</span><br><span class="line">now state is io.github.xuyushi.state.StateC</span><br></pre></td></tr></table></figure>
<h1 id="参考">参考</h1><blockquote>
<ul>
<li>『first head 设计模式』 </li>
<li><a href="https://sourcemaking.com/design_patterns/state" target="_blank" rel="external">https://sourcemaking.com/design_patterns/state</a></li>
<li><a href="http://www.cnblogs.com/java-my-life/archive/2012/06/08/2538146.html" target="_blank" rel="external">http://www.cnblogs.com/java-my-life/archive/2012/06/08/2538146.html</a></li>
<li><a href="http://blog.csdn.net/hguisu/article/details/7557252" target="_blank" rel="external">http://blog.csdn.net/hguisu/article/details/7557252</a></li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h1 id="状态模式_State_Design_Pattern">状态模式 State Design Pattern</h1><h2 id="定义">定义</h2><h2 id="目的">目的</h2><ul>
<li>根据不同的状态，采取不同的行为</li>
<li>允许一个对象在其内部状态改变的时候改变其行为。这个对象看上去就像是改变了它的类一样</li>
</ul>
<h2 id="优点">优点</h2><ul>
<li>减少了 if else，switch 语句的复杂程度 </li>
<li>增加新的状态和逻辑时，便于修改</li>
</ul>
<h2 id="缺点">缺点</h2><ul>
<li>类的种类增加<br>*</li>
</ul>
<h2 id="步骤">步骤</h2><ol>
<li>定义一个 <code>context</code> 类，来给外接提供一个接口</li>
<li>定义一个 <code>state</code> 基类</li>
<li>根据<code>state</code> 状态，派生定义其他的不同状态类</li>
<li>在派生<code>state</code> 中，定义不同的行为</li>
<li>在<code>context</code>中持有一个当前 <code>state</code>的变量</li>
<li>改变<code>context</code>中的<code>state</code>状态</li>
</ol>]]>
    
    </summary>
    
      <category term="Pattern" scheme="http://yoursite.com/tags/Pattern/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="justava" scheme="http://yoursite.com/categories/justava/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java注解]]></title>
    <link href="http://yoursite.com/2016/02/01/%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/02/01/注解/</id>
    <published>2016-02-01T07:12:00.000Z</published>
    <updated>2016-02-03T03:45:16.000Z</updated>
    <content type="html"><![CDATA[<h1 id="注解">注解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> Column &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">primary</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。</li>
<li>方法的名称就是参数的名称，返回值类型就是参数的类型。</li>
<li>可以通过default来声明参数的默认值。</li>
<li>在这里可以看到@Retention和@Target这样的元注解，用来声明注解本身的行为。</li>
<li>@Retention用来声明注解的保留策略，有CLASS、RUNTIME和SOURCE这三种，分别表示注解保存在类文件、JVM运行时刻和源代码中。</li>
<li>只有当声明为RUNTIME的时候，才能够在运行时刻通过反射API来获取到注解的信息。</li>
<li>@Target用来声明注解可以被添加在哪些类型的元素上，如类型、方法和域等。</li>
<li>就可以定义一个注解了，它将自动继承Annotation</li>
</ul>
<p>@Target 表示该注解用于什么地方，可能的值在枚举类 ElemenetType 中，包括： </p>
<ul>
<li>ElemenetType.CONSTRUCTOR 构造器声明 </li>
<li>ElemenetType.FIELD 域声明（包括 enum 实例） </li>
<li>ElemenetType.LOCAL_VARIABLE 局部变量声明 </li>
<li>ElemenetType.METHOD 方法声明 </li>
<li>ElemenetType.PACKAGE 包声明 </li>
<li>ElemenetType.PARAMETER 参数声明 </li>
<li>ElemenetType.TYPE 类，接口（包括注解类型）或enum声明 </li>
</ul>
<p>@Retention 表示在什么级别保存该注解信息。可选的参数值在枚举类型 RetentionPolicy 中，包括： </p>
<ul>
<li>RetentionPolicy.SOURCE 注解将被编译器丢弃 </li>
<li>RetentionPolicy.CLASS 注解在class文件中可用，但会被VM丢弃 </li>
<li><p>RetentionPolicy.RUNTIME VM将在运行期也保留注释，因此可以通过反射机制读取注解的信息。 </p>
<pre><code><span class="variable">@Documented</span> 将此注解包含在 javadoc 中 ，它代表着此注解会被javadoc工具提取成文档。在doc文档中的内容会因为此注解的信息内容不同而不同。相当与<span class="variable">@see</span>,<span class="variable">@param</span> 等。

<span class="variable">@Inherited</span> 允许子类继承父类中的注解，例子中补充。
</code></pre></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="注解">注解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</sp]]>
    </summary>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[强引用、软引用、弱引用、虚引用]]></title>
    <link href="http://yoursite.com/2016/01/14/Java%20%E5%BC%95%E7%94%A8/"/>
    <id>http://yoursite.com/2016/01/14/Java 引用/</id>
    <published>2016-01-14T09:27:00.000Z</published>
    <updated>2016-02-03T03:45:20.000Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="强引用、软引用、弱引用、虚引用">强引用、软引用、弱引用、虚引用</h1><h2 id="强引用_StrongReference">强引用 StrongReference</h2><blockquote>
<p>只要某个对象有强引用与之关联，JVM必定不会回收这个对象，即使在内存不足的情况下，JVM宁愿抛出OutOfMemory错误也不会回收这种对象</p>
</blockquote>
<p>若需要 jvm 回收此对象，可以将对象复制为 null</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object o = <span class="keyword">new</span> Object();   <span class="comment">//  强引用  </span></span><br><span class="line">o = <span class="keyword">null</span>;     <span class="comment">// 帮助垃圾收集器回收此对象</span></span><br></pre></td></tr></table></figure>
<p><strong>但是如果这个o是全局的变量时，就需要在不用这个对象时赋值为null，因为强引用不会被垃圾回收。</strong></p>
<a id="more"></a>
<h2 id="软引用_SoftReference">软引用 SoftReference</h2><blockquote>
<p>对于软引用关联着的对象，只有在内存不足的时候JVM才会回收该对象。</p>
</blockquote>
<p>因此，这一点可以很好地用来解决OOM的问题，并且这个特性很适合用来实现缓存：比如网页缓存、图片缓存等。</p>
<h2 id="弱引用_WeakReference">弱引用 WeakReference</h2><blockquote>
<p>当JVM进行垃圾回收时，无论内存是否充足，都会回收被弱引用关联的对象</p>
</blockquote>
<h2 id="虚引用_PhantomReference">虚引用 PhantomReference</h2><blockquote>
<p>如果一个对象与虚引用关联，则跟没有引用与之关联一样，在任何时候都可能被垃圾回收器回收。</p>
</blockquote>
<h1 id="参考">参考</h1><blockquote>
<p><a href="http://www.cnblogs.com/dolphin0520/p/3784171.html" target="_blank" rel="external">http://www.cnblogs.com/dolphin0520/p/3784171.html</a><br><a href="http://blog.csdn.net/mazhimazh/article/details/19752475" target="_blank" rel="external">http://blog.csdn.net/mazhimazh/article/details/19752475</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h1 id="强引用、软引用、弱引用、虚引用">强引用、软引用、弱引用、虚引用</h1><h2 id="强引用_StrongReference">强引用 StrongReference</h2><blockquote>
<p>只要某个对象有强引用与之关联，JVM必定不会回收这个对象，即使在内存不足的情况下，JVM宁愿抛出OutOfMemory错误也不会回收这种对象</p>
</blockquote>
<p>若需要 jvm 回收此对象，可以将对象复制为 null</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object o = <span class="keyword">new</span> Object();   <span class="comment">//  强引用  </span></span><br><span class="line">o = <span class="keyword">null</span>;     <span class="comment">// 帮助垃圾收集器回收此对象</span></span><br></pre></td></tr></table></figure>
<p><strong>但是如果这个o是全局的变量时，就需要在不用这个对象时赋值为null，因为强引用不会被垃圾回收。</strong></p>]]>
    
    </summary>
    
      <category term="GC" scheme="http://yoursite.com/tags/GC/"/>
    
      <category term="引用" scheme="http://yoursite.com/tags/%E5%BC%95%E7%94%A8/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 内存泄露]]></title>
    <link href="http://yoursite.com/2016/01/14/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    <id>http://yoursite.com/2016/01/14/内存泄露/</id>
    <published>2016-01-14T09:27:00.000Z</published>
    <updated>2016-02-03T03:36:53.000Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="内存泄露">内存泄露</h1><blockquote>
<p>内存泄露的定义:<br>当某些对象不再被应用程序所使用,但是由于仍然被引用而导致垃圾收集器不能释放(Remove,移除)他们.</p>
</blockquote>
<h2 id="产生的原因：">产生的原因：</h2><p>内存对象明明已经不需要的时候，还仍然保留着这块内存和它的访问方式（引用）</p>
<p><em>长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露，尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是java中内存泄露的发生场景。</em></p>
<a id="more"></a>
<h3 id="常见的内存泄漏">常见的内存泄漏</h3><h4 id="非静态内部类的静态实例容易造成内存泄漏">非静态内部类的静态实例容易造成内存泄漏</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityextends</span> <span class="title">Activity</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">static</span> Demo sInstance = <span class="keyword">null</span>;  </span><br><span class="line">          </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(BundlesavedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.activity_main);  </span><br><span class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">           sInstance= <span class="keyword">new</span> Demo();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;  </span><br><span class="line">    voiddoSomething()  &#123;  </span><br><span class="line">               System.out.print(<span class="string">"dosth."</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码中的sInstance实例类型为静态实例，在第一个MainActivity act1实例创建时，sInstance会获得并一直持有act1的引用。当MainAcitivity销毁后重建，因为sInstance持有act1的引用，所以act1是无法被GC回收的，进程中会存在2个MainActivity实例（act1和重建后的MainActivity实例），这个act1对象就是一个无用的但一直占用内存的对象，即无法回收的垃圾对象。所以，对于lauchMode不是singleInstance的Activity， 应该避免在activity里面实例化其非静态内部类的静态实例。</p>
<h4 id="activity使用静态成员">activity使用静态成员</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Drawable sBackground;    </span><br><span class="line"><span class="annotation">@Override</span>    </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle state)</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">super</span>.onCreate(state);    </span><br><span class="line">    </span><br><span class="line">    TextView label = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);    </span><br><span class="line">    label.setText(<span class="string">"Leaks are bad"</span>);    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (sBackground == <span class="keyword">null</span>) &#123;    </span><br><span class="line">        sBackground = getDrawable(R.drawable.large_bitmap);    </span><br><span class="line">    &#125;    </span><br><span class="line">    label.setBackgroundDrawable(sBackground);    </span><br><span class="line">    </span><br><span class="line">    setContentView(label);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于用静态成员sBackground 缓存了drawable对象，所以activity加载速度会加快，但是这样做是错误的。因为在android 2.3系统上，它会导致activity销毁后无法被系统回收。</p>
<p>label .setBackgroundDrawable函数调用会将label赋值给sBackground的成员变量mCallback。</p>
<p>上面代码意味着：sBackground（GC Root）会持有TextView对象，而TextView持有Activity对象。所以导致Activity对象无法被系统回收。</p>
<p>下面看看android4.0为了避免上述问题所做的改进。</p>
<p>先看看android 2.3的Drawable.Java对setCallback的实现：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(Callback cb)</span></span>{

    mCallback = cb;
</code></pre><p>}</p>
<p>再看看android 4.0的Drawable.Java对setCallback的实现：</p>
<pre><code><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(Callback cb)</span></span>{

    mCallback = newWeakReference&lt;Callback&gt; (cb);
</code></pre><p>}</p>
<p>在android 2.3中要避免内存泄漏也是可以做到的, 在activity的onDestroy时调用</p>
<p>sBackgroundDrawable.setCallback(null)。</p>
<p>以上2个例子的内存泄漏都是因为Activity的引用的生命周期超越了activity对象的生命周期。也就是常说的Context泄漏，因为activity就是context。</p>
<p>想要避免context相关的内存泄漏，需要注意以下几点：</p>
<ul>
<li>不要对activity的context长期引用(一个activity的引用的生存周期应该和activity的生命周期相同)</li>
<li>如果可以的话，尽量使用关于application的context来替代和activity相关的context</li>
<li>如果一个acitivity的非静态内部类的生命周期不受控制，那么避免使用它；正确的方法是使用一个静态的内部类，并且对它的外部类有一WeakReference，就像在ViewRootImpl中内部类W所做的那样。</li>
</ul>
<h4 id="使用handler时的内存问题">使用handler时的内存问题</h4><p>我们知道，Handler通过发送Message与其他线程交互，Message发出之后是存储在目标线程的MessageQueue中的，而有时候Message也不是马上就被处理的，可能会驻留比较久的时间。在Message类中存在一个成员变量 target，它强引用了handler实例，如果Message在Queue中一直存在，就会导致handler实例无法被回收，如果handler对应的类是非静态内部类 ，则会导致外部类实例（Activity或者Service）不会被回收，这就造成了外部类实例的泄露。 所以正确处理Handler等之类的内部类，应该将自己的Handler定义为静态内部类，并且在类中增加一个成员变量，用来弱引用外部类实例，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutterClass</span>  </span><br><span class="line"></span>&#123;  </span><br><span class="line">        ......  </span><br><span class="line">        ......  </span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span>  </span><br><span class="line">        </span>&#123;  </span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;OutterClass&gt; mOutterClassInstance;  </span><br><span class="line">            ......  </span><br><span class="line">            ......  </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Android lint 会产生一个警告 </p>
<blockquote>
<p>This Handler class should be static or leaks might occur (com.example.ta.MainActivity.1)<br>Issue: Ensures that Handler classes do not hold on to a reference to an outer class<br>Id: HandlerLeak<br>In Android, Handler classes should be static or leaks might occur. Messages enqueued on the application thread’s MessageQueue also retain their target Handler. If the Handler is an inner class, its outer class will be retained as well. To avoid leaking the outer class, declare the Handler as a static nested class with a WeakReference to its outer class.</p>
</blockquote>
<p>原因是：<br>当Android应用启动的时候，会先创建一个应用主线程的Looper对象，Looper实现了一个简单的消息队列，一个一个的处理里面的Message对象。主线程Looper对象在整个应用生命周期中存在。<br>当在主线程中初始化Handler时，该Handler和Looper的消息队列关联。发送到消息队列的Message会引用发送该消息的Handler对象，这样系统可以调用 Handler#handleMessage(Message) 来分发处理该消息。<br>在Java中，非静态(匿名)内部类会引用外部类对象。而静态内部类不会引用外部类对象。<br>如果外部类是Activity，则会引起Activity泄露 。<br>当Activity finish后，延时消息会继续存在主线程消息队列中1分钟，然后处理消息。而该消息引用了Activity的Handler对象，然后这个Handler又引用了这个Activity。这些引用对象会保持到该消息被处理完，这样就导致该Activity对象无法被回收，从而导致了上面说的 Activity泄露。<br>要修改该问题，只需要按照Lint提示的那样，把Handler类定义为静态即可，然后通过WeakReference 来保持外部的Activity对象。 </p>
<h4 id="注册某个对象后未反注册">注册某个对象后未反注册</h4><h4 id="集合中对象没清理造成的内存泄露">集合中对象没清理造成的内存泄露</h4><h4 id="资源对象没关闭造成的内存泄露">资源对象没关闭造成的内存泄露</h4><p>比如 cursor 、file</p>
<h2 id="GC_机制">GC 机制</h2><p>如上图所示，GC会选择一些它了解还存活的对象作为内存遍历的根节点（GC Roots），比方说thread stack中的变量，JNI中的全局变量，zygote中的对象（class loader加载）等，然后开始对heap进行遍历。到最后，部分没有直接或者间接引用到GC Roots的就是需要回收的垃圾，会被GC回收掉。如下图蓝色部分</p>
<p><img src="http://img.blog.csdn.net/20131025115331781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2VtbWVt/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="GC"></p>
<ul>
<li>Shallow heap表示对象本身所占内存大小，一个内存大小100bytes的对象Shallow heap就是100bytes。</li>
<li>Retained heap表示通过回收这一个对象总共能回收的内存，比方说一个100bytes的对象还直接或者间接地持有了另外3个100bytes的对象引用，回收这个对象的时候如果另外3个对象没有其他引用也能被回收掉的时候，Retained heap就是400bytes。</li>
</ul>
<h2 id="内存管理分析">内存管理分析</h2><ol>
<li>打开 DDMS ，选中需要分析的进程，然后点击update heap<img src="http://7xqcjz.com1.z0.glb.clouddn.com/2016-02-01-14527590780897.jpg" alt=""></li>
<li>在app 中操作后，点击 Cause GC,观察heap 的使用量<br><img src="http://7xqcjz.com1.z0.glb.clouddn.com/2016-02-01-14527591546703.png" alt=""></li>
<li>点击 <img src="http://7xqcjz.com1.z0.glb.clouddn.com/2016-02-01-14527592144127.png" alt=""> 导出 HPROF 文件</li>
<li>转换 hprof 的格式，从而支持使用 MAT 工具打开分析</li>
<li><code>hprof-conv &lt;source_file&gt; &lt;dest_file&gt;</code></li>
<li>使用 MAT 打开生成文件</li>
<li>点击<img src="http://7xqcjz.com1.z0.glb.clouddn.com/2016-02-01-14527602568618.png" alt=""> 查看详情</li>
</ol>
<h2 id="MAT_使用">MAT 使用</h2><ul>
<li>可以在上面过滤自己需要的类名，支持正则表达式</li>
<li>在某一项上右键打开菜单选择 list objects -&gt;with incoming refs 将列出该类的实例：</li>
<li>快速找出某个实例没被释放的原因，可以右健 Path to GC Roots—&gt;exclue all phantom/weak/soft etc</li>
</ul>
<ul>
<li>Shallow heap表示对象本身所占内存大小，一个内存大小100bytes的对象Shallow heap就是100bytes。</li>
<li>Retained heap表示通过回收这一个对象总共能回收的内存，比方说一个100bytes的对象还直接或者间接地持有了另外3个100bytes的对象引用，回收这个对象的时候如果另外3个对象没有其他引用也能被回收掉的时候，Retained heap就是400bytes。</li>
</ul>
<h2 id="分析实例">分析实例</h2><h3 id="实例1">实例1</h3><p>Mat中导入数据后，过滤包名，按照 obj 数量排序<br><img src="http://7xqcjz.com1.z0.glb.clouddn.com/2016-02-01-14530982417272.png" alt=""><br>发现 AsyncTaskService 有9个实例，不正常，右键  Path to GC Roots 查看<br><img src="http://7xqcjz.com1.z0.glb.clouddn.com/2016-02-01-14530983537752.png" alt=""><br>发现是 volley 中的 NetworkDispatcher 持有了 context 导致释放不了</p>
<p><strong>NetworkDispatcher 持有（用到了） UserStatsPostRequest 持有 mLIstener、mErrorListener 持有 context</strong></p>
<p>在  <code>AsyncTaskService</code>中 <code>PoiInfoApi.refreshPoiInfo(AsyncTaskService.this, null);</code><br>传入的 <code>context</code> 是<code>AsyncTaskService</code>，导致 <code>PoiInfo</code> 与 <code>AsyncTaskService</code>的生命周期相关联<br>当 <code>service</code>生命周期结束时，<code>mLIstener</code> 仍然持有 <code>Service</code> ，导致 GC无法回收，当下次再次请求 <code>Poiapi</code>时，会再次用到一个新的<code>AsyncTaskService</code> </p>
<h4 id="解决方法">解决方法</h4><p>传入的 <code>context</code> 不使用 <code>activity</code> 或<code>Service</code>这样和 Android 生命周期相关的，使用 <code>appcation</code> 中的 <code>sContext</code></p>
<h3 id="实例2">实例2</h3><ol>
<li>点击<img src="http://7xqcjz.com1.z0.glb.clouddn.com/2016-02-01-14532588103369.png" alt=""> ，按照堆排序</li>
</ol>
<p><img src="http://7xqcjz.com1.z0.glb.clouddn.com/2016-02-01-14532588339301.png" alt=""><br>此时是按照占用的大小排序的，首先Retained Heap表示这个对象以及它所持有的其它引用（包括直接和间接）所占的总内存，因此从上图中看，前两行的Retained Heap是最大的，我们分析内存泄漏时，内存最大的对象也是最应该去怀疑的。</p>
<p>在每一行的最左边都有一个文件型的图标，这些图标有的左下角带有一个红色的点，有的则没有。带有红点的对象就表示是可以被GC Roots访问到的，根据上面的讲解，可以被GC Root访问到的对象都是无法被回收的</p>
<p>第一行为资源文件，比较大很正常，第二行为 bitmap，点击  -&gt; Path to GC Roots -&gt; exclude weak references，为什么选择exclude weak references呢？因为弱引用是不会阻止对象被垃圾回收器回收的，所以我们这里直接把它排除掉<br><img src="http://7xqcjz.com1.z0.glb.clouddn.com/2016-02-01-14532592207499.png" alt=""></p>
<p><strong>黑体表示变量名，右侧正常体表示类名， 由上到下表示含有关系</strong></p>
<p>可以看到 bitmap 之所以释放不掉是因为 linearLayout 无法释放，而linearLayout之所以释放不掉是因为 linearLayout 无法释放，是因为 LoginActivity 无法释放，….最终发现是 SPDataManager中 的 sContext 持有了 Activity，导致 Activity 无法被 GC回收</p>
<h4 id="解决方法-1">解决方法</h4><p>在构造 SPDataManger 时，不使用 Activity 的 context ，而使用 getapplicationContext，避免与 Actvity 的生命周期关联</p>
<h1 id="参考">参考</h1><blockquote>
<p><a href="http://blog.csdn.net/gemmem/article/details/13017999" target="_blank" rel="external">http://blog.csdn.net/gemmem/article/details/13017999</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/4223863" target="_blank" rel="external">http://blog.csdn.net/guolin_blog/article/details/4223863</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h1 id="内存泄露">内存泄露</h1><blockquote>
<p>内存泄露的定义:<br>当某些对象不再被应用程序所使用,但是由于仍然被引用而导致垃圾收集器不能释放(Remove,移除)他们.</p>
</blockquote>
<h2 id="产生的原因：">产生的原因：</h2><p>内存对象明明已经不需要的时候，还仍然保留着这块内存和它的访问方式（引用）</p>
<p><em>长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露，尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是java中内存泄露的发生场景。</em></p>]]>
    
    </summary>
    
      <category term="GC" scheme="http://yoursite.com/tags/GC/"/>
    
      <category term="内存泄露" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio 技巧]]></title>
    <link href="http://yoursite.com/2016/01/11/IDEA%20%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2016/01/11/IDEA 技巧/</id>
    <published>2016-01-11T09:27:00.000Z</published>
    <updated>2016-02-03T03:45:26.000Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="IDEA_技巧">IDEA 技巧</h1><h2 id="重构">重构</h2><ul>
<li>Undo<br><strong>Commend + Z</strong><br><em>undo 是安全的，可以撤销所有 refactor 操作。</em></li>
<li>Find and replace code duplicates<br><em>可以选择当前文件，uncommit 文件、项目等 进行替换</em></li>
<li>Rename<br><strong>Shift + Commend + F6</strong></li>
<li>Type migration<br><strong>Shift + Commend + F6</strong><br>改变变量的属性，举个🌰 ， 可以将 int -&gt; Long ，需要migration 的是 int 而不是变量</li>
<li>Invert boolean<br>反转 boolean 型变量值 ，true -&gt; false, false -&gt; true ,同时 rename 变量值</li>
<li>safe delete<br><strong>Fn + Commend + Delete</strong><br>安全删除</li>
<li><p>extract<br>提取变量、参数等</p>
</li>
<li><p>提取为参数:Option + Cmd + P  将变量提取到方法中为方法的参数</p>
</li>
<li>提取变量为函数名:Option + Cmd + V 将 new 出的对象，提取成一个对象</li>
<li>提取常量:Option + Cmd + C 提取的常量为 static final,TAG快速生成</li>
<li>提取方法:Option + Cmd + M</li>
<li>提取为成员变量:Option + Cmd + F</li>
</ul>
<a id="more"></a>
<h3 id="push_menber_up/down">push menber up/down</h3><p>把这个变量、方法 放入父类/子类</p>
<h2 id="跳转">跳转</h2><ul>
<li>增加书签:Option + F3</li>
<li>跳转书签:Cmd + F3</li>
<li>进入函数:Cmd + B</li>
<li>跳转到上次使用过的文件:Control + Tab</li>
<li>跳转到最近使用过的文件:Comand + E</li>
<li>跳转到 navigation bav：Comand + 上<h2 id="编辑">编辑</h2></li>
<li>上下移动代码:Option + Shift + Up/Down</li>
<li>扩大缩小选中范围:Option + Up/Down</li>
<li>自动补全: Cmd + shift + enter</li>
<li>跳转上次编辑:Cmd + shift + backspace</li>
<li>快速修复:Option + enter</li>
<li>快速生成代码:Cmd + Option + T</li>
<li>格式化代码:Cmd + Option + L</li>
<li>列编辑模式: Cmd + shift + 8</li>
</ul>
<h2 id="查找">查找</h2><ul>
<li>智能查找:shift shift</li>
<li>查找类:Cmd + O</li>
<li>查找文件:shift + Cmd + O</li>
<li>查找方法:Cmd + F12</li>
<li>查找调用:Option + F7</li>
<li>快速查看实现方法，不用跳转新窗口:Option + space</li>
<li>查看某个方法的调用路径:control + Option+ H</li>
<li>查看类的继承关系:control + H<h2 id="调试">调试</h2></li>
<li>运行:control + R</li>
<li>调试:control + D</li>
<li>单步:F8</li>
<li>进入函数:F7</li>
<li>全速运行: Option + Cmd + R<h3 id="其他">其他</h3></li>
<li>查看 class 结构:Cmd + F12</li>
<li>提示输入:Cmd + P</li>
<li>智能命令:shift + Cmd + A Analyze Data Flow to Here 可以查找这个变量的流程</li>
<li>条件断点:在断点处右键</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h1 id="IDEA_技巧">IDEA 技巧</h1><h2 id="重构">重构</h2><ul>
<li>Undo<br><strong>Commend + Z</strong><br><em>undo 是安全的，可以撤销所有 refactor 操作。</em></li>
<li>Find and replace code duplicates<br><em>可以选择当前文件，uncommit 文件、项目等 进行替换</em></li>
<li>Rename<br><strong>Shift + Commend + F6</strong></li>
<li>Type migration<br><strong>Shift + Commend + F6</strong><br>改变变量的属性，举个🌰 ， 可以将 int -&gt; Long ，需要migration 的是 int 而不是变量</li>
<li>Invert boolean<br>反转 boolean 型变量值 ，true -&gt; false, false -&gt; true ,同时 rename 变量值</li>
<li>safe delete<br><strong>Fn + Commend + Delete</strong><br>安全删除</li>
<li><p>extract<br>提取变量、参数等</p>
</li>
<li><p>提取为参数:Option + Cmd + P  将变量提取到方法中为方法的参数</p>
</li>
<li>提取变量为函数名:Option + Cmd + V 将 new 出的对象，提取成一个对象</li>
<li>提取常量:Option + Cmd + C 提取的常量为 static final,TAG快速生成</li>
<li>提取方法:Option + Cmd + M</li>
<li>提取为成员变量:Option + Cmd + F</li>
</ul>]]>
    
    </summary>
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[VIM 技巧]]></title>
    <link href="http://yoursite.com/2016/01/10/VIM/"/>
    <id>http://yoursite.com/2016/01/10/VIM/</id>
    <published>2016-01-10T09:27:00.000Z</published>
    <updated>2016-02-03T03:45:31.000Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="VIM">VIM</h1><h2 id="代码选择">代码选择</h2><p>v:选择代码块<br>V:选择代码行<br>ctrl+V:多行选中模式 （esc 之后生效）</p>
<h2 id="跳转">跳转</h2><ul>
<li>）:代码快跳转</li>
<li>] :函数跳转</li>
<li>} :class 跳转 <h2 id="移动">移动</h2></li>
<li>hjkl</li>
<li>f/F: 查找字符</li>
<li>t/T: 同上，区别是停留前一个字符</li>
<li>gg/G: 文件开头/结尾 </li>
<li>H/M/L：跳到当前屏幕的顶部/中间/底部。</li>
<li>‘[ 跳到上一次被改变的文本的第一个字符</li>
<li>‘. 跳到上一次文本被修改的地方</li>
<li>‘’ ==跳回上一次跳转的地方==</li>
<li>‘^ 跳到插入模式最后一次结束的地方 <h2 id="编辑模式">编辑模式</h2></li>
<li>x/X是删除当前光标下/光标前的一个字符</li>
<li>d/c/y是删除/修改/复制命令</li>
</ul>
<p><em>diw, yiw, ciw, viw 删除(复制,改变,选中)光标所在单词<br>da”, ya”, ca”, va” 删除(复制,改变,选中)””号内所有文本,包括引号本身</em></p>
<ul>
<li>* 向前查找当前光标下的单词</li>
<li># 反方向查找当前光标下的单词 </li>
<li>我们在使用的过程中，会遇到这样的问题，分别在两个地方删除内容，然后需要分别粘贴，这样的情况就需要用到”ayy “ap这样的命令了，”ayy是把当前行复制到名字为a的寄存器中，”ap就是在这里粘帖a寄存器中的内容。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h1 id="VIM">VIM</h1><h2 id="代码选择">代码选择</h2><p>v:选择代码块<br>V:选择代码行<br>ctrl+V:多行选中模式 （esc 之后生效）</p>
<h2 id="跳转">跳转</h2><ul>
<li>）]]>
    </summary>
    
      <category term="Vim" scheme="http://yoursite.com/tags/Vim/"/>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Looper、Handler、Message 分析]]></title>
    <link href="http://yoursite.com/2015/12/02/Looper%E3%80%81Handler%E3%80%81Message%20%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2015/12/02/Looper、Handler、Message 分析/</id>
    <published>2015-12-02T04:32:00.000Z</published>
    <updated>2016-02-03T03:45:35.000Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="Looper、Handler、Message_分析">Looper、Handler、Message 分析</h1><h2 id="Looper">Looper</h2><p>通常在线程中是这样使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> Handler mHandler;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          Looper.prepare();</span><br><span class="line"></span><br><span class="line">          mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                  <span class="comment">// process incoming messages here</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">          Looper.loop();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<h3 id="prepare()">prepare()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    prepare(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个 Looper 只能有一个 ThreadLoacl 对象</p>
<blockquote>
<p>ThreadLocal对象保证每个线程中的 Looper 实例互不相同</p>
</blockquote>
<a id="more"></a>
<h3 id="loop()">loop()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">        <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure the identity of this thread is that of the local process,</span></span><br><span class="line">        <span class="comment">// and keep track of what that identity token actually is.</span></span><br><span class="line">        Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">            <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class="line">            Printer logging = me.mLogging;</span><br><span class="line">            <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">                logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</span><br><span class="line">                        msg.callback + <span class="string">": "</span> + msg.what);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            msg.target.dispatchMessage(msg);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">                logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Make sure that during the course of dispatching the</span></span><br><span class="line">            <span class="comment">// identity of the thread wasn't corrupted.</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</span><br><span class="line">            <span class="keyword">if</span> (ident != newIdent) &#123;</span><br><span class="line">                Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></span><br><span class="line">                        + Long.toHexString(ident) + <span class="string">" to 0x"</span></span><br><span class="line">                        + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></span><br><span class="line">                        + msg.target.getClass().getName() + <span class="string">" "</span></span><br><span class="line">                        + msg.callback + <span class="string">" what="</span> + msg.what);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            msg.recycle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>mylooper()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sThreadLocal.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>直接返回ThreadLocal中存储的 Looper 变量。<br>然后取出 looper 中的 Queue，并且循环取出队列中的 message，交给<code>msg.target.dispatchMessage(msg);</code>处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;  </span><br><span class="line">            handleCallback(msg);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;  </span><br><span class="line">                    <span class="keyword">return</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            handleMessage(msg);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><code>handleMessage(msg)</code>是一个空方法，我们在创建 handler 实例时，复写这个方法。然后根据msg.what进行消息处理</p>
<h2 id="Handler">Handler</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</span><br><span class="line">            <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</span><br><span class="line">            <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</span><br><span class="line">                    (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</span><br><span class="line">                    klass.getCanonicalName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mLooper = Looper.myLooper();</span><br><span class="line">        <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mQueue = mLooper.mQueue;</span><br><span class="line">        mCallback = callback;</span><br><span class="line">        mAsynchronous = async;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>同样，通过<code>Looper.myLooper()</code>获取当前线程中的 Looper 对象，并且得到其中的 Queue</p>
<p>所有 <code>sendMessage</code>、<code>sendMessageDelayed</code>、<code>sendEmptyMessageDelayed</code>等，最终都调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">    MessageQueue queue = mQueue;</span><br><span class="line">    <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        RuntimeException e = <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</span><br><span class="line">        Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终会将meg 加入到 queue 的队列中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(msg + <span class="string">" This message is already in use."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(<span class="string">"Message must have a target."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                RuntimeException e = <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                        msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</span><br><span class="line">                Log.w(<span class="string">"MessageQueue"</span>, e.getMessage(), e);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            msg.when = when;</span><br><span class="line">            Message p = mMessages;</span><br><span class="line">            <span class="keyword">boolean</span> needWake;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">                <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">                msg.next = p;</span><br><span class="line">                mMessages = msg;</span><br><span class="line">                needWake = mBlocked;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></span><br><span class="line">                <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">                <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">                needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">                Message prev;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    prev = p;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                        needWake = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">                prev.next = msg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">            <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">                nativeWake(mPtr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Handler_post">Handler post</h2><p>eg</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mHandler.post(<span class="keyword">new</span> Runnable()  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="annotation">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span>  </span><br><span class="line">            </span>&#123;  </span><br><span class="line">                <span class="comment">//do something </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable r)</span>  </span><br><span class="line">   </span>&#123;  </span><br><span class="line">      <span class="keyword">return</span>  sendMessageDelayed(getPostMessage(r), <span class="number">0</span>);  </span><br><span class="line">   &#125;  </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Message <span class="title">getPostMessage</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        Message m = Message.obtain();</span><br><span class="line">        m.callback = r;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在getPostMessage中，得到了一个Message对象，然后将我们创建的Runable对象作为callback属性，赋值给了此message.</p>
<blockquote>
<p>产生一个Message对象，可以new  ，也可以使用Message.obtain()方法；两者都可以，但是更建议使用obtain方法，因为Message内部维护了一个Message池用于Message的复用，避免使用new 重新分配内存。</p>
</blockquote>
<p>最终还是会调用<code>enqueueMessage</code></p>
<p>在 dispathMessage 的过程中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;  </span><br><span class="line">           handleCallback(msg);  </span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">           <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;  </span><br><span class="line">               <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;  </span><br><span class="line">                   <span class="keyword">return</span>;  </span><br><span class="line">               &#125;  </span><br><span class="line">           &#125;  </span><br><span class="line">           handleMessage(msg);  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>getPostMessage</code>中，将post 中的<code>Runnable</code>赋值给了<code>Message.callback</code><br>所以，会执行<code>handleCallback(msg)</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        message.callback.run();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>即执行 Post 中的Runnable</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h1 id="Looper、Handler、Message_分析">Looper、Handler、Message 分析</h1><h2 id="Looper">Looper</h2><p>通常在线程中是这样使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> Handler mHandler;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          Looper.prepare();</span><br><span class="line"></span><br><span class="line">          mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                  <span class="comment">// process incoming messages here</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">          Looper.loop();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<h3 id="prepare()">prepare()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    prepare(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个 Looper 只能有一个 ThreadLoacl 对象</p>
<blockquote>
<p>ThreadLocal对象保证每个线程中的 Looper 实例互不相同</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Handler" scheme="http://yoursite.com/tags/Handler/"/>
    
      <category term="Looper" scheme="http://yoursite.com/tags/Looper/"/>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Media Player]]></title>
    <link href="http://yoursite.com/2015/10/27/Media%20Playback/"/>
    <id>http://yoursite.com/2015/10/27/Media Playback/</id>
    <published>2015-10-27T03:32:00.000Z</published>
    <updated>2016-02-03T03:45:38.000Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="Media_Player">Media Player</h1><h2 id="Audio_Stream">Audio Stream</h2><p>Android为不同的应用场合定义了不同的Audio Stream: Voice Call, Ring, Music,Alarm, Notification, DTMF。 这些AudioStream是相互独立的，所以也有各自的音量</p>
<h2 id="使用">使用</h2><p>最重要的类是 <code>MediaPlayer</code>，获取、解码、播放<br>播放 res/raw 中的文件 举个🌰</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MediaPlayer mediaPlayer = MediaPlayer.create(context, R.raw.sound_file_1);</span><br><span class="line">mediaPlayer.start(); <span class="comment">// no need to call prepare(); create() does that for you</span></span><br></pre></td></tr></table></figure>
<h3 id="异步准备">异步准备</h3><p>可能需要比较长的时间，media 需要获取资源和解码，最好不要放在 UI 线程。<br>此时可以使用<code>prepareAsync()</code>方法，这个方法在后台运行，当准备工资就绪之后在<code>MediaPlayer.OnPreparedListener</code>返回，可以在回调函数<code>setOnPreparedListener()</code>中设置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mediaPlayer.prepareAsync();</span><br><span class="line">mediaPlayer.setOnPreparedListener(<span class="keyword">new</span> MediaPlayer.OnPreparedListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrepared</span><span class="params">(MediaPlayer mp)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span>: 15/10/27  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="管理状态">管理状态</h3><p>player 有特有的状态，当操作 player 时只能当 player 处理特定的状态中，否则会抛出异常或者其他一些想不到的情况。<br>举个🌰，当 creat一个新<code>MediaPlayer</code>时，他处于<em>idle</em>状态，在这个状态中，可以初始化，调用<code>setDataSource()</code>，这样就进入了<em>Initialized</em> 状态，接着我们调用<code>prepare()</code>或者 <code>prepareAsync()</code>，当<code>MediaPlayer</code>准备完全之后，会进入<em>Prepared</em>状态，当<code>start()</code>播放之后，可以调用 paused stopped 等；</p>
<p>状态流程如图<br><img src="http://developer.android.com/images/mediaplayer_state_diagram.gif" alt="状态流程"></p>
<h3 id="释放MediaPlayer">释放MediaPlayer</h3><p>MediaPlayer会消耗系统资源，当不在需要的时候需要用<code>release()</code>释放，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mediaPlayer.release();</span><br><span class="line">mediaPlayer = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<h2 id="使用_Service_MediaPlayer">使用 Service MediaPlayer</h2><p>…………</p>
<h2 id="audio_focus">audio focus</h2><p>按照AudioFocus的机制，在使用Audio之前，需要申请AudioFocus，在获得AudioFocus之后才可以使用Audio；如果有别的程序竞争你正在使用的Audio，你的程序需要在收到通知之后做停止播放或者降低声音的处理。值得指出的是，这种机制是需要合作完成的，需要所有使用Audio资源的程序都按照这种机制来做，而如果有程序在它失去AudioFocus的时候仍然在使用Audio，AudioFocus拿它也没办法。而这一点对于开放系统的Android来说很致命的：用户可能安装没遵守这种机制的程序，或者版本太老还没引入这种机制的程序，这最终会导致很差的用户体验。</p>
<p>当应用需要播放声音或者 notification 时，需要请求audio focus，一旦获取焦点之后，便可以播放声音，如果有很多别的audio focus，要么停止播放此时的音乐，或者<em>lower it to a quiet level</em>，再之后获取audio focus继续播放</p>
<p>获取/放弃AudioFocus的方法都在android.media.AudioManager中，获取AudioFocus用<code>requestAudioFocus()</code>；用完之后，放弃AudioFocus，用<code>abandonAudioFocus()</code>。</p>
<p>举🌰</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AudioManager audioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);</span><br><span class="line"><span class="keyword">int</span> result = audioManager.requestAudioFocus(<span class="keyword">this</span>, AudioManager.STREAM_MUSIC,</span><br><span class="line">    AudioManager.AUDIOFOCUS_GAIN);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result != AudioManager.AUDIOFOCUS_REQUEST_GRANTED) &#123;</span><br><span class="line">    <span class="comment">// could not get audio focus.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>requestAudioFocus()</code>的第一个参数 是<code>AudioManager.OnAudioFocusChangeListener</code>其中的<code>onAudioFocusChange()</code>方法<br>🌰 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span></span><br><span class="line">                <span class="keyword">implements</span> <span class="title">AudioManager</span>.<span class="title">OnAudioFocusChangeListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAudioFocusChange</span><span class="params">(<span class="keyword">int</span> focusChange)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Do something based on focus change...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其onAudioFocusChange()方法是Audio Focus被抢占与再次获得通知的地方。所以，每个要使用AudioFocus的程序都要小心实现这个函数，保证AudioFocus实现的一致性。申请成功之后监听AudioFocus使用情况的Listener，参数 <code>foucsChange</code></p>
<ul>
<li><code>AUDIOFOCUS_GAIN</code>:获取到了焦点</li>
<li><code>AUDIOFOCUS_LOSS</code>:失去焦点很长一段时间，必须停止所有的 audio playback，此时可以释放资源了，比如释放 <code>MediaPlayer</code></li>
<li><code>AUDIOFOCUS_LOSS_TRANSIENT</code>:暂时失去焦点，但是会之后获取到焦点。此时必须停止播放，但是资源不必释放，因为之后会获取焦点</li>
<li><code>AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK</code>: 暂时失去焦点，但是允许继续小声的播放音乐，而不必关闭播放<br>举个🌰</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAudioFocusChange</span><span class="params">(<span class="keyword">int</span> focusChange)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (focusChange) &#123;</span><br><span class="line">        <span class="keyword">case</span> AudioManager.AUDIOFOCUS_GAIN:</span><br><span class="line">            <span class="comment">// resume playback</span></span><br><span class="line">            <span class="keyword">if</span> (mMediaPlayer == <span class="keyword">null</span>) initMediaPlayer();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!mMediaPlayer.isPlaying()) mMediaPlayer.start();</span><br><span class="line">            mMediaPlayer.setVolume(<span class="number">1.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> AudioManager.AUDIOFOCUS_LOSS:</span><br><span class="line">            <span class="comment">// Lost focus for an unbounded amount of time: stop playback and release media player</span></span><br><span class="line">            <span class="keyword">if</span> (mMediaPlayer.isPlaying()) mMediaPlayer.stop();</span><br><span class="line">            mMediaPlayer.release();</span><br><span class="line">            mMediaPlayer = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:</span><br><span class="line">            <span class="comment">// Lost focus for a short time, but we have to stop</span></span><br><span class="line">            <span class="comment">// playback. We don't release the media player because playback</span></span><br><span class="line">            <span class="comment">// is likely to resume</span></span><br><span class="line">            <span class="keyword">if</span> (mMediaPlayer.isPlaying()) mMediaPlayer.pause();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:</span><br><span class="line">            <span class="comment">// Lost focus for a short time, but it's ok to keep playing</span></span><br><span class="line">            <span class="comment">// at an attenuated level</span></span><br><span class="line">            <span class="keyword">if</span> (mMediaPlayer.isPlaying()) mMediaPlayer.setVolume(<span class="number">0.1f</span>, <span class="number">0.1f</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面的时序图描述了AudioFocus被抢占与再次获取的典型场景<br><img src="http://my.csdn.net/uploads/201204/03/1333406240_6856.jpg" alt=""></p>
<ul>
<li>AudioFocus Client通过requestAudioFocus()获取AudioFocus，在获得AudioFocus之后，开始播放Audio[Step#1 ~ #2]；</li>
<li>其它程序（Other App）也通过requestAudioFocus()获取AudioFocus [Step#3]</li>
<li>AudioFocus Client失去了Audio Focus，在onAudioFocusChanged()中，根据focusChange【focusChange的值与Other App申请时的durationHint相反，即focusChange = -1*durationHint】的值，做第二节中所描述的处理[Step#4]；</li>
<li>其它程序（Other App）获取Audio Focus之后，开始播放Audio[Step#5]；</li>
<li>其它程序（Other App）使用Audio之后，通过abandonAudioFocus()归还AudioFocus [Step#6]；</li>
<li>AudioFocus Client重新获得了Audio Focus，可做进一步的处理 [Step#7]</li>
</ul>
<p>AudioFocus中虽然把AudioStream作为参数，但是AudioFocus的内部裁决机制并未针对AudioStream做什么特别的处理。AudioFocus的处理针对所有的申请者来说的，除了它自身内部作为Alert的申请者有点特殊外，其它一律平等。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h1 id="Media_Player">Media Player</h1><h2 id="Audio_Stream">Audio Stream</h2><p>Android为不同的应用场合定义了不同的Audio Stream: Voice Call, Ring, Music,Alarm, Notification, DTMF。 这些AudioStream是相互独立的，所以也有各自的音量</p>
<h2 id="使用">使用</h2><p>最重要的类是 <code>MediaPlayer</code>，获取、解码、播放<br>播放 res/raw 中的文件 举个🌰</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MediaPlayer mediaPlayer = MediaPlayer.create(context, R.raw.sound_file_1);</span><br><span class="line">mediaPlayer.start(); <span class="comment">// no need to call prepare(); create() does that for you</span></span><br></pre></td></tr></table></figure>
<h3 id="异步准备">异步准备</h3><p>可能需要比较长的时间，media 需要获取资源和解码，最好不要放在 UI 线程。<br>此时可以使用<code>prepareAsync()</code>方法，这个方法在后台运行，当准备工资就绪之后在<code>MediaPlayer.OnPreparedListener</code>返回，可以在回调函数<code>setOnPreparedListener()</code>中设置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mediaPlayer.prepareAsync();</span><br><span class="line">mediaPlayer.setOnPreparedListener(<span class="keyword">new</span> MediaPlayer.OnPreparedListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPrepared</span><span class="params">(MediaPlayer mp)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span>: 15/10/27  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="view，Media Player" scheme="http://yoursite.com/tags/view%EF%BC%8CMedia-Player/"/>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android View 小结（下）]]></title>
    <link href="http://yoursite.com/2015/10/24/%E8%87%AA%E5%AE%9A%E4%B9%89view/"/>
    <id>http://yoursite.com/2015/10/24/自定义view/</id>
    <published>2015-10-24T13:32:00.000Z</published>
    <updated>2016-02-03T03:45:43.000Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="自定义_view">自定义 view</h1><p>自定义 view 的主要步骤如下：</p>
<ol>
<li>自定义 view 属性</li>
<li>在 view 的构造方法中，加载自定义的属性</li>
<li>重写 onLayout</li>
<li>重写 onMeasure</li>
<li>重写 onDraw</li>
</ol>
<h2 id="自定义_view_属性">自定义 view 属性</h2><p>自定义View的属性，首先在res/values/  下建立一个attrs.xml</p>
<a id="more"></a>
<p>stye.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"AppTheme"</span> <span class="attribute">parent</span>=<span class="value">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="css"></span><br><span class="line">        &lt;!<span class="tag">--</span> <span class="tag">Customize</span> <span class="tag">your</span> <span class="tag">theme</span> <span class="tag">here</span>. <span class="tag">--</span>&gt;</span><br><span class="line">        &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">customViewStyle</span>"&gt;<span class="at_rule">@<span class="keyword">style/custom_view_style&lt;/item&gt;</span></span><br><span class="line">    </span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"text_style"</span>&gt;</span><span class="css"></span><br><span class="line">        &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="rule"><span class="attribute">android</span>:<span class="value">text<span class="string">"&gt;text from style&lt;/item&gt;</span><br><span class="line">    </span></span></span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"default_view_style"</span>&gt;</span><span class="css"></span><br><span class="line">        &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">attr4</span>"&gt;<span class="tag">attr4</span> <span class="tag">from</span> <span class="tag">default_view_style</span>&lt;/<span class="tag">item</span>&gt;</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"custom_view_style"</span>&gt;</span><span class="css"></span><br><span class="line">        &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">attr3</span>"&gt;<span class="tag">attr3</span> <span class="tag">from</span> <span class="tag">custom_view_style</span>&lt;/<span class="tag">item</span>&gt;</span><br><span class="line">        &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">attr4</span>"&gt;<span class="tag">attr4</span> <span class="tag">from</span> <span class="tag">custom_view_style</span>&lt;/<span class="tag">item</span>&gt;</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"xml_style"</span>&gt;</span><span class="css"></span><br><span class="line">        &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">attr2</span>"&gt;<span class="tag">attr2</span> <span class="tag">from</span> <span class="tag">xml_style</span>&lt;/<span class="tag">item</span>&gt;</span><br><span class="line">        &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">attr3</span>"&gt;<span class="tag">attr3</span> <span class="tag">from</span> <span class="tag">xml_style</span>&lt;/<span class="tag">item</span>&gt;</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"myViewText"</span> <span class="attribute">format</span>=<span class="value">"string"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"myViewTextColor"</span> <span class="attribute">format</span>=<span class="value">"color"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"myViewTextSize"</span> <span class="attribute">format</span>=<span class="value">"dimension"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">declare-styleable</span> <span class="attribute">name</span>=<span class="value">"myView"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"myViewText"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"myViewTextColor"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"myViewTextSize"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"attr1"</span> <span class="attribute">format</span>=<span class="value">"string"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"attr2"</span> <span class="attribute">format</span>=<span class="value">"string"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"attr3"</span> <span class="attribute">format</span>=<span class="value">"string"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"attr4"</span> <span class="attribute">format</span>=<span class="value">"string"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"attr5"</span> <span class="attribute">format</span>=<span class="value">"string"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"attr6"</span> <span class="attribute">format</span>=<span class="value">"string"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">declare-styleable</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"customViewStyle"</span> <span class="attribute">format</span>=<span class="value">"reference"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在主布局中加载自定义的 view</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">RelativeLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attribute">xmlns:custum</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:paddingBottom</span>=<span class="value">"@dimen/activity_vertical_margin"</span></span><br><span class="line">    <span class="attribute">android:paddingLeft</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    <span class="attribute">android:paddingRight</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    <span class="attribute">android:paddingTop</span>=<span class="value">"@dimen/activity_vertical_margin"</span></span><br><span class="line">    <span class="attribute">tools:context</span>=<span class="value">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意xmlns导入的是整个工程的包名，不是 view 的包名--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在 gradle工程中只需要    xmlns:custum="http://schemas.android.com/apk/res-auto"</span><br><span class="line">--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">io.github.xuyushi.viewtest.MyView</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:padding</span>=<span class="value">"10dp"</span></span><br><span class="line">        <span class="attribute">custum:myViewText</span>=<span class="value">"test"</span></span><br><span class="line">        <span class="attribute">custum:myViewTextColor</span>=<span class="value">"#ffff00"</span></span><br><span class="line">        <span class="attribute">custum:myViewTextSize</span>=<span class="value">"30sp"</span></span><br><span class="line">        /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意xmlns导入的是整个工程的包名，不是 view 的包名.在 gradle工程中只需要    xmlns:custum=”<a href="http://schemas.android.com/apk/res-auto" target="_blank" rel="external">http://schemas.android.com/apk/res-auto</a>“</p>
<p>2.自定义 view</p>
<p>自定义 view 继承 view</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.xuyushi.viewtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.res.TypedArray;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Rect;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by xuyushi on 15/10/23.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String LOG_TAG = <span class="string">"MyView"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mText;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mextColor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mextSize;</span><br><span class="line">    <span class="keyword">private</span> Rect mBound;</span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span>: 15/10/23 三个构造函数分别什么时候调用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, R.attr.customViewStyle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        TypedArray array = context.getTheme()</span><br><span class="line">                .obtainStyledAttributes(attrs, R.styleable.myView, defStyleAttr, R.style.default_view_style);</span><br><span class="line">        <span class="keyword">int</span> n = array.getIndexCount();</span><br><span class="line"></span><br><span class="line">        Log.d(LOG_TAG, <span class="string">"attr1 =&gt; "</span> + array.getString(R.styleable.myView_attr1));</span><br><span class="line">        Log.d(LOG_TAG, <span class="string">"attr2 =&gt; "</span> + array.getString(R.styleable.myView_attr2));</span><br><span class="line">        Log.d(LOG_TAG, <span class="string">"attr3 =&gt; "</span> + array.getString(R.styleable.myView_attr3));</span><br><span class="line">        Log.d(LOG_TAG, <span class="string">"attr4 =&gt; "</span> + array.getString(R.styleable.myView_attr4));</span><br><span class="line">        Log.d(LOG_TAG, <span class="string">"attr5 =&gt; "</span> + array.getString(R.styleable.myView_attr5));</span><br><span class="line">        Log.d(LOG_TAG, <span class="string">"attr6 =&gt; "</span> + array.getString(R.styleable.myView_attr6));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> attr = array.getIndex(i);</span><br><span class="line">            <span class="keyword">switch</span> (attr) &#123;</span><br><span class="line">                <span class="keyword">case</span> R.styleable.myView_myViewText:</span><br><span class="line">                    mText = array.getString(attr);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> R.styleable.myView_myViewTextColor:</span><br><span class="line">                    mextColor = array.getColor(attr, Color.BLACK);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> R.styleable.myView_myViewTextSize:</span><br><span class="line">                    mextSize = array.getDimensionPixelSize(attr,</span><br><span class="line">                            getResources().getDimensionPixelSize(R.dimen.textsize));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        array.recycle(); <span class="comment">//注意释放</span></span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setTextSize(mextSize);</span><br><span class="line">        mBound = <span class="keyword">new</span> Rect();</span><br><span class="line">        Log.d(<span class="string">"MyView"</span>, <span class="string">"height"</span> + mBound.height());</span><br><span class="line">        mPaint.getTextBounds(mText, <span class="number">0</span>, mText.length(), mBound);</span><br><span class="line">        <span class="comment">//调用getTextBounds 方法之后，会根据mText计算mbound 的大小</span></span><br><span class="line">        Log.d(<span class="string">"MyView"</span>, <span class="string">"height"</span> + mBound.height());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                mText = randText();</span><br><span class="line">                <span class="comment">//长度改变，需要重新 layout</span></span><br><span class="line">                requestLayout();</span><br><span class="line">                invalidate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">randText</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span> (set.size() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> randomInt = random.nextInt(<span class="number">10</span>);</span><br><span class="line">            set.add(randomInt);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (Integer i : set) &#123;</span><br><span class="line">            sb.append(<span class="string">""</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        return sb.toString();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1234567"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> width;</span><br><span class="line">        <span class="keyword">int</span> height;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">        <span class="comment">//match parent 或者直接写定大小</span></span><br><span class="line">            width = widthSize;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//wrap content</span></span><br><span class="line">            mPaint.setTextSize(mextSize);</span><br><span class="line">            mPaint.getTextBounds(mText, <span class="number">0</span>, mText.length(), mBound);</span><br><span class="line">            <span class="keyword">float</span> textWidth = mBound.width();</span><br><span class="line">            <span class="keyword">int</span> desired = (<span class="keyword">int</span>) (getPaddingLeft() + textWidth + getPaddingRight());</span><br><span class="line">            width = desired;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">            height = heightSize;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mPaint.setTextSize(mextSize);</span><br><span class="line">            mPaint.getTextBounds(mText, <span class="number">0</span>, mText.length(), mBound);</span><br><span class="line">            <span class="keyword">float</span> textHeight = mBound.height();</span><br><span class="line">            <span class="keyword">int</span> desired = (<span class="keyword">int</span>) (getPaddingTop() + textHeight + getPaddingBottom());</span><br><span class="line">            height = desired;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        setMeasuredDimension(width, height);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setColor(Color.RED);</span><br><span class="line">        canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>, getMeasuredWidth(), getMeasuredHeight(), mPaint);</span><br><span class="line">        mPaint.setColor(mextColor);</span><br><span class="line">        canvas.drawText(mText, getWidth() / <span class="number">2</span> - mBound.width() / <span class="number">2</span>,</span><br><span class="line">                getHeight() / <span class="number">2</span> + mBound.height() / <span class="number">2</span></span><br><span class="line">                , mPaint);</span><br><span class="line">        Log.d(<span class="string">"onDraw"</span>, <span class="string">"height"</span> + mBound.height());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数词典">函数词典</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line">public void getTextBounds (char[] text, int index, int count, Rect bounds)</span><br><span class="line"></span><br><span class="line">Added in API level 1</span><br><span class="line">Return in bounds (allocated by the caller) the smallest rectangle that encloses all of the characters, with an implied origin at (0,0).</span><br><span class="line"></span><br><span class="line">Parameters</span><br><span class="line">text	Array of chars to measure and return their unioned bounds</span><br><span class="line">index	Index of the first char in the array to measure</span><br><span class="line">count	The number of chars, beginning at index, to measure</span><br><span class="line">bounds	Returns the unioned bounds of all the text. Must be allocated by the caller.</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line">Added in API level 1</span><br><span class="line">Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint.</span><br><span class="line"></span><br><span class="line">Parameters</span><br><span class="line">text	The text to be drawn</span><br><span class="line">x	The x-coordinate of the origin of the text being drawn</span><br><span class="line">y	The y-coordinate of the baseline of the text being drawn</span><br><span class="line">paint	The paint used for the text (e.g. color, size, style)</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="view的构造函数">view的构造函数</h2><p>可以看到自定义的 view 有三个构造方法</p>
<ol>
<li>public void MyView(Context context) {}</li>
<li>public void MyView(Context context, AttributeSet attrs) {}</li>
<li>public void MyView(Context context, AttributeSet attrs, int defStyle) {}</li>
</ol>
<p><strong>三个构造方法调用的情况</strong></p>
<ol>
<li>code动态创建一个view而不使用布局文件xml inflate</li>
<li>多了一个AttributeSet类型的参数，在通过布局文件xml创建一个view时，这个参数会将xml里设定的属性传递给构造函数。如果你采用xml inflate的方法却没有在code里实现C2，那么运行时就会报错。但是由于编译能顺利通过</li>
<li>在源码中通常是自己的显示调用</li>
</ol>
<p>官方文档如下</p>
<blockquote>
<p>Perform inflation from XML and apply a class-specific base style. This constructor of View allows subclasses to use their own base style when they are inflating. For example, a Button class’s constructor would call this version of the super class constructor and supply R.attr.buttonStyle for defStyle; this allows the theme’s button style to modify all of the base view attributes (in particular its background) as well as the Button class’s attributes.</p>
</blockquote>
<p>对第三个参数的解释是：</p>
<blockquote>
<p>An attribute in the current theme that contains a reference to a style resource to apply to this view. If 0, no default style will be applied.</p>
</blockquote>
<p>代码第<code>40</code>行， <strong>注意传入的参数是0 </strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TypedArray array = context.getTheme()</span><br><span class="line">        .obtainStyledAttributes(attrs, R.styleable.myView, defStyleAttr, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>接着分析<code>obtainStyledAttributes</code><a href="http://developer.android.com/intl/zh-cn/reference/android/content/res/Resources.Theme.html#obtainStyledAttributes(android.util.AttributeSet,%20int[],%20int,%20int" target="_blank" rel="external">官方文档</a>)</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TypedArray <span class="title">obtainStyledAttributes</span> <span class="params">(AttributeSet <span class="built_in">set</span>, <span class="keyword">int</span>[] attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>set：在XML中明确写出了的属性集合,如<code>android:layout_width</code>， 在本例子中即<code>myView_myViewTextColor</code></li>
<li>defStyleAttr: 代表需要查询自定义的属性值的 view，在本程序中指<code>myView</code></li>
<li>defStyleAttr：这是一个定义在attrs.xml文件中的attribute。这个值起作用需要两个条件：1. 值不为0；2. 在Theme中使用了</li>
<li>defStyleRes：这是在styles.xml文件中定义的一个style。只有当defStyleAttr没有起作用，才会使用到这个值</li>
</ul>
<blockquote>
<p>如果在Code中实例化一个View会调用第一个构造函数，如果在xml中定义会调用第二个构造函数，而第三个函数系统是不调用的，要由View（我们自定义的或系统预定义的View，如此处的CustomTextView和Button）显式调用，比如在这里我们在第二个构造函数中调用了第三个构造函数，并将R.attr.CustomizeStyle传给了第三个参数。</p>
</blockquote>
<p>　　第三个参数的意义就如同它的名字所说的，是默认的Style，只是这里没有说清楚，这里的默认的Style是指它在当前Application或Activity所用的Theme中的默认Style<br>显然，一个属性最终的取值，有一个顺序问题，这个顺序优先级从高到低依次是：</p>
<p>==结论==</p>
<ol>
<li>直接在XML文件中定义的。</li>
<li>在XML文件中通过style这个属性定义的。</li>
<li>通过defStyleAttr定义的。</li>
<li>通过defStyleRes定义的。</li>
<li>直接在当然工程的theme主题下定义的。</li>
</ol>
<h4 id="实现过程">实现过程</h4><h5 id="1-_在_view_的_attr_中增加属性">1. 在 view 的 attr 中增加属性</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">declare-styleable</span> <span class="attribute">name</span>=<span class="value">"myView"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"myViewText"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"myViewTextColor"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"myViewTextSize"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"attr1"</span> <span class="attribute">format</span>=<span class="value">"string"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"attr2"</span> <span class="attribute">format</span>=<span class="value">"string"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"attr3"</span> <span class="attribute">format</span>=<span class="value">"string"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"attr4"</span> <span class="attribute">format</span>=<span class="value">"string"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"attr5"</span> <span class="attribute">format</span>=<span class="value">"string"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"attr6"</span> <span class="attribute">format</span>=<span class="value">"string"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">declare-styleable</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">attr</span> <span class="attribute">name</span>=<span class="value">"customViewStyle"</span> <span class="attribute">format</span>=<span class="value">"reference"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意要将<code>customViewStyle</code> 的格式为<code>reference</code></strong></p>
<h5 id="2-_在_style_中定义custom_view_style">2. 在 style 中定义custom_view_style</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"custom_view_style"</span>&gt;</span><span class="css"></span><br><span class="line">    &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">attr3</span>"&gt;<span class="tag">attr3</span> <span class="tag">from</span> <span class="tag">custom_view_style</span>&lt;/<span class="tag">item</span>&gt;</span><br><span class="line">    &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">attr4</span>"&gt;<span class="tag">attr4</span> <span class="tag">from</span> <span class="tag">custom_view_style</span>&lt;/<span class="tag">item</span>&gt;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="3-在xml_中定义_xml_style">3.在xml 中定义 xml_style</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"xml_style"</span>&gt;</span><span class="css">  </span><br><span class="line">    &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">attr2</span>"&gt;<span class="tag">attr2</span> <span class="tag">from</span> <span class="tag">xml_style</span>&lt;/<span class="tag">item</span>&gt;  </span><br><span class="line">    &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">attr3</span>"&gt;<span class="tag">attr3</span> <span class="tag">from</span> <span class="tag">xml_style</span>&lt;/<span class="tag">item</span>&gt;  </span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="4-_为了使_theme_生效">4. 为了使 theme 生效</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"AppTheme"</span> <span class="attribute">parent</span>=<span class="value">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="css"></span><br><span class="line">    &lt;!— <span class="tag">Customize</span> <span class="tag">your</span> <span class="tag">theme</span> <span class="tag">here</span>. —&gt;</span><br><span class="line">    &lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="tag">customViewStyle</span>"&gt;<span class="at_rule">@<span class="keyword">style/custom_view_style&lt;/item&gt;</span></span><br><span class="line">    &lt;item name=<span class="string">"attr5"</span>&gt;attr5 from AppTheme&lt;/item&gt;</span><br><span class="line">    &lt;item name=<span class="string">"attr6"</span>&gt;attr6 from AppTheme&lt;/item&gt;</span><br><span class="line"></span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="5-_布局文件中定义">5. 布局文件中定义</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">io.github.xuyushi.viewtest.MyView</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:padding</span>=<span class="value">"10dp"</span></span><br><span class="line">    <span class="attribute">custum:myViewText</span>=<span class="value">"test"</span></span><br><span class="line">    <span class="attribute">custum:myViewTextColor</span>=<span class="value">"#ffff00"</span></span><br><span class="line">    <span class="attribute">custum:myViewTextSize</span>=<span class="value">"30sp"</span></span><br><span class="line">    <span class="attribute">custum:attr1</span>=<span class="value">"attr1 from xml"</span></span><br><span class="line">    <span class="attribute">custum:attr2</span>=<span class="value">"attr2 from xml"</span></span><br><span class="line">    <span class="attribute">style</span>=<span class="value">"@style/xml_style"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="6-_将最后一个参数由0变为">6. 将最后一个参数由0变为</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypedArray array = context.obtainStyledAttributes(attrs, R.styleable.CustomView, defStyle, R.style.default_view_style);</span><br></pre></td></tr></table></figure>
<h5 id="7-_在_view_的构造函数中获取这些_attr1-6的属性">7. 在 view 的构造函数中获取这些 attr1-6的属性</h5><p><strong>log</strong></p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10-24 02:05</span>:37.136    <span class="number">4769-4769</span>/? D/MyView﹕ attr1 =&gt; attr1 from xml</span><br><span class="line"><span class="number">10-24 02:05</span>:37.136    <span class="number">4769-4769</span>/? D/MyView﹕ attr2 =&gt; attr2 from xml</span><br><span class="line"><span class="number">10-24 02:05</span>:37.136    <span class="number">4769-4769</span>/? D/MyView﹕ attr3 =&gt; attr3 from xml_style</span><br><span class="line"><span class="number">10-24 02:05</span>:37.136    <span class="number">4769-4769</span>/? D/MyView﹕ attr4 =&gt; attr4 from default_view_style</span><br><span class="line"><span class="number">10-24 02:05</span>:37.136    <span class="number">4769-4769</span>/? D/MyView﹕ attr5 =&gt; attr5 from default_view_style</span><br><span class="line"><span class="number">10-24 02:05</span>:37.136    <span class="number">4769-4769</span>/? D/MyView﹕ attr6 =&gt; null</span><br></pre></td></tr></table></figure>
<p>分析结果</p>
<ul>
<li>attr1只在xml布局文件中设置，所以值为attr1 from xml。</li>
<li>attr2在xml布局文件和xml style中都设置了，取值为布局文件中设置的值，所以为attr2 from xml。</li>
<li>attr3没有在xml布局文件中设置，但是在xml style和defStyleAttr定义的style中设置了，取xml style中的值，所以值为attr3 from xml_style。</li>
<li>attr4只在defStyleAttr定义的style中设置了，所以值为attr4 from custom_view_style。</li>
<li>attr5和attr6没有在任何地方设置值，所以为null。</li>
</ul>
<h4 id="总结">总结</h4><ol>
<li>直接在XML布局文件中设置的值优先级最高，如果这里设置了值，就不会去取其他地方的值了。</li>
<li>XML布局文件中有一个叫“style”的属性，它指向一个style，在这个style中设置的属性值优先级次之。</li>
<li>如果上面两个地方都没有设置值，那么就会根据View带三个参数的构造方法中的第三个参数attribute指向的style设置值，前提是这个attribute的值不为0。</li>
<li>如果上面的attribute设置为0了，我们就根据obtainStyledAttributes()方法中的最后一个参数指向的style来设置值。</li>
<li>如果仍然没有设置到值，就会用theme中直接设置的属性值，而不会去管第3步和第4步中是否设置了值。</li>
</ol>
<blockquote>
<p><strong> 参考 <a href="http://www.cnblogs.com/angeldevil/p/3479431.html" target="_blank" rel="external">http://www.cnblogs.com/angeldevil/p/3479431.html</a> 详细解释</strong></p>
</blockquote>
<h2 id="onMeasure">onMeasure</h2><p>onMeasure 是测量视图的大小的</p>
<p>MeasureSpec的值由specSize和specMode共同组成的，其中specSize记录的是大小，specMode记录的是规格。specMode一共有三种类型</p>
<ul>
<li>EXACTLY：表示父视图希望子视图的大小应该是由specSize的值来决定的，系统默认会按照这个规则来设置子视图的大小，开发人员当然也可以按照自己的意愿设置成任意的大小。</li>
<li>AT_MOST：最多只能是specSize中指定的大小，开发人员应该尽可能小得去设置这个视图，并且保证不会超过specSize。系统默认会按照这个规则来设置子视图的大小，开发人员当然也可以按照自己的意愿设置成任意的大小。通常是 wrapcontent</li>
<li>UNSPECIFIED：表示开发人员可以将视图按照自己的意愿设置成任意的大小，没有任何限制</li>
</ul>
<p>当设置了WRAP_CONTENT时，我们需要自己进行测量，即重写onMesure</p>
<p>计算长宽 最后调用 <code>setMeasuredDimension(width, height);</code></p>
<h2 id="onLayout">onLayout</h2><p>确定视图的位置，主要是在 viewgroup 中使用</p>
<p>ViewGroup中的onLayout()方法是一个抽象方法，这就意味着所有ViewGroup的子类都必须重写这个方法。这个例子 layout 只有一个子 view</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleLayout</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>(context, attrs);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);  </span><br><span class="line">        <span class="keyword">if</span> (getChildCount() &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">            View childView = getChildAt(<span class="number">0</span>);  </span><br><span class="line">            measureChild(childView, widthMeasureSpec, heightMeasureSpec);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (getChildCount() &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">            View childView = getChildAt(<span class="number">0</span>);  </span><br><span class="line">            childView.layout(<span class="number">0</span>, <span class="number">0</span>, childView.getMeasuredWidth(), childView.getMeasuredHeight());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码非常的简单，我们来看下具体的逻辑吧。你已经知道，onMeasure()方法会在onLayout()方法之前调用，因此这里在onMeasure()方法中判断SimpleLayout中是否有包含一个子视图，如果有的话就调用measureChild()方法来测量出子视图的大小。<br>接着在onLayout()方法中同样判断SimpleLayout是否有包含一个子视图，然后调用这个子视图的layout()方法来确定它在SimpleLayout布局中的位置，这里传入的四个参数依次是0、0、childView.getMeasuredWidth()和childView.getMeasuredHeight()，分别代表着子视图在SimpleLayout中左上右下四个点的坐标。其中，调用childView.getMeasuredWidth()和childView.getMeasuredHeight()方法得到的值就是在onMeasure()方法中测量出的宽和高。</p>
<p><strong>在onLayout()过程结束后，我们就可以调用getWidth()方法和getHeight()方法来获取视图的宽高了，否则得到是 0</strong></p>
<h2 id="onDraw">onDraw</h2><h2 id="ViewGroup">ViewGroup</h2><h1 id="参考">参考</h1><blockquote>
<p><a href="http://blog.csdn.net/lmj623565791/article/details/24252901" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/24252901</a><br><a href="http://blog.csdn.net/lmj623565791/article/details/38339817" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/38339817</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h1 id="自定义_view">自定义 view</h1><p>自定义 view 的主要步骤如下：</p>
<ol>
<li>自定义 view 属性</li>
<li>在 view 的构造方法中，加载自定义的属性</li>
<li>重写 onLayout</li>
<li>重写 onMeasure</li>
<li>重写 onDraw</li>
</ol>
<h2 id="自定义_view_属性">自定义 view 属性</h2><p>自定义View的属性，首先在res/values/  下建立一个attrs.xml</p>]]>
    
    </summary>
    
      <category term="view" scheme="http://yoursite.com/tags/view/"/>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[robolectric]]></title>
    <link href="http://yoursite.com/2015/08/15/robolectric/"/>
    <id>http://yoursite.com/2015/08/15/robolectric/</id>
    <published>2015-08-15T07:25:00.000Z</published>
    <updated>2016-02-03T03:45:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="环境搭建">环境搭建</h2><p>环境 : Android Studio 1.2.1.1+ Android Gradle Plugin 1.2.3+ Gradle 2.2.1+</p>
<p>gradle中加入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  ...</span><br><span class="line">  testCompile <span class="string">'org.robolectric:robolectric:3.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>确认在Build Variants窗口内的Test Artifact中选择了”Unit Tests”。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-ab4402443ad7dc5f.png" alt=""></p>
<p>然后，在工程的src文件夹内创建test和test/java文件夹。需要注意的是，你不能在Android视图下进行这些操作，要么在系统的文件管理器内创建，要么在工程窗口左上方点击下拉菜单选择Project视图。最终的工程结构应该是这样的：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-9e098817f6fcca44.png" alt=""></p>
<blockquote>
<p>配置成功之后<code>java</code>文件夹的颜色是绿色的</p>
</blockquote>
<p><code>**重要重要**</code><br>Run -&gt; Edit Configurations -&gt; Defaults -&gt; Junit<br>设置如下  <strong>$MODULE_DIR$.</strong><br><img src="https://camo.githubusercontent.com/b6776bd8da529df04410b6c6d5d6a6a63ebce717/687474703a2f2f726f626f6c6563747269632e6f72672f696d616765732f616e64726f69642d73747564696f2d636f6e6669677572652d64656661756c74732d34626634383430322e706e67" alt=""></p>
<p>gradle 同步</p>
<blockquote>
<p>注意Robolectric目前不支持android 5.1 API level 22，编译时 sdk = 21 或者以下。</p>
</blockquote>
<a id="more"></a>
<h2 id="单元测试写法">单元测试写法</h2><p><strong>@Config(constants = BuildConfig.class)</strong><br>记得加入</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//省略import</span></span><br><span class="line"><span class="annotation">@RunWith</span>(RobolectricGradleTestRunner.class)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivityTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MainActivity activity;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//执行初始化操作</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateTextViewContent</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	     <span class="comment">//执行各种测试逻辑判断</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Activity">Activity</h3><h4 id="Activity的创建">Activity的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Activity activity = Robolectric.buildActivity(MyAwesomeActivity.class).create().get();</span><br></pre></td></tr></table></figure>
<p>会创建一个<code>MyAwesomeActivity</code>实例，然后调用它的onCreat()方法</p>
<p>如果只想验证其onResume()方法，可以如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ActivityController controller = Robolectric.buildActivity(MyAwesomeActivity.class).create().start();</span><br><span class="line">Activity activity = controller.get();</span><br><span class="line"><span class="comment">// assert that something hasn't happened</span></span><br><span class="line">activityController.resume();</span><br><span class="line"><span class="comment">// assert it happened!</span></span><br></pre></td></tr></table></figure></p>
<p>如果想测试整个activity 的生命周期可以<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Activity activity = Robolectric.buildActivity(MyAwesomeActivity.class).create().start().resume().visible().get();</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>等你需要在activity中，对view进行一些操作时候，比如<code>Robolectric.clickOn()</code>，这时候你需要在<code>create()</code>后加入<code>visible()</code></p>
</blockquote>
<h4 id="举例">举例</h4><p>我在工程中建立了三个Activity分别为 MainActivity，AnotherActivity，ThridActivity<br>在MainActivity加入按键跳转到AnotherActivity中，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startAnotherActivity</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">     startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, AnotherActivity.class));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p>增加单元测试用例判断跳转的是否正确<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clickingLogin_shouldStartLoginActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Button button = (Button) activity.findViewById(R.id.button);</span><br><span class="line">    assertTrue(button.isEnabled());</span><br><span class="line">    button.performClick();</span><br><span class="line"></span><br><span class="line">    Intent expectedIntent = <span class="keyword">new</span> Intent(activity, ThridActivity.class);</span><br><span class="line">    assertEquals(expectedIntent,shadowOf(activity).getNextStartedActivity() );</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>1.通过 activity.findViewById 找到button<br>2.判断button是否可以点击<br>3.点击button<br>4.构造一个intent（从MainActivity跳转到ThridActivity）<br>5.判断实际跳转的和构造的是否一直</p>
<p>结构不一致报错<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java.lang.AssertionError: </span><br><span class="line">Expected :Intent&#123;componentName=ComponentInfo&#123;io.github.xuyushi.robolectric/io.github.xuyushi.robolectric.ThridActivity&#125;, extras=Bundle[&#123;&#125;]&#125;</span><br><span class="line">Actual   :Intent&#123;componentName=ComponentInfo&#123;io.github.xuyushi.robolectric/io.github.xuyushi.robolectric.AnotherActivity&#125;, extras=Bundle[&#123;&#125;]&#125;</span><br><span class="line"> &lt;Click to see difference&gt;</span><br><span class="line">	at org.junit.Assert.fail(Assert.java:<span class="number">91</span>)</span><br><span class="line">	at org.junit.Assert.failNotEquals(Assert.java:<span class="number">645</span>)</span><br><span class="line">	at org.junit.Assert.assertEquals(Assert.java:<span class="number">126</span>)</span><br><span class="line">	at org.junit.Assert.assertEquals(Assert.java:<span class="number">145</span>)</span><br></pre></td></tr></table></figure></p>
<p>可以很清楚的定位到错误</p>
<h3 id="Dialog验证">Dialog验证</h3><h3 id="Toast验证">Toast验证</h3><h3 id="response写法">response写法</h3><h3 id="Shodaw">Shodaw</h3><h2 id="参考">参考</h2><blockquote>
<p><a href="http://hkliya.gitbooks.io/unit-test-android-with-robolectric/content/2-api-explained.html" target="_blank" rel="external">http://hkliya.gitbooks.io/unit-test-android-with-robolectric/content/2-api-explained.html</a><br><a href="http://robolectric.org" target="_blank" rel="external">http://robolectric.org</a><br><a href="http://chriszou.com/android-unit-testing-with-robolectric" target="_blank" rel="external">http://chriszou.com/android-unit-testing-with-robolectric</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="环境搭建">环境搭建</h2><p>环境 : Android Studio 1.2.1.1+ Android Gradle Plugin 1.2.3+ Gradle 2.2.1+</p>
<p>gradle中加入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  ...</span><br><span class="line">  testCompile <span class="string">'org.robolectric:robolectric:3.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>确认在Build Variants窗口内的Test Artifact中选择了”Unit Tests”。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-ab4402443ad7dc5f.png" alt=""></p>
<p>然后，在工程的src文件夹内创建test和test/java文件夹。需要注意的是，你不能在Android视图下进行这些操作，要么在系统的文件管理器内创建，要么在工程窗口左上方点击下拉菜单选择Project视图。最终的工程结构应该是这样的：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-9e098817f6fcca44.png" alt=""></p>
<blockquote>
<p>配置成功之后<code>java</code>文件夹的颜色是绿色的</p>
</blockquote>
<p><code>**重要重要**</code><br>Run -&gt; Edit Configurations -&gt; Defaults -&gt; Junit<br>设置如下  <strong>$MODULE_DIR$.</strong><br><img src="https://camo.githubusercontent.com/b6776bd8da529df04410b6c6d5d6a6a63ebce717/687474703a2f2f726f626f6c6563747269632e6f72672f696d616765732f616e64726f69642d73747564696f2d636f6e6669677572652d64656661756c74732d34626634383430322e706e67" alt=""></p>
<p>gradle 同步</p>
<blockquote>
<p>注意Robolectric目前不支持android 5.1 API level 22，编译时 sdk = 21 或者以下。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="robolectric" scheme="http://yoursite.com/tags/robolectric/"/>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio中进行单元测试]]></title>
    <link href="http://yoursite.com/2015/08/15/Android%20Studio%E4%B8%AD%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2015/08/15/Android Studio中进行单元测试/</id>
    <published>2015-08-15T07:25:00.000Z</published>
    <updated>2016-02-03T03:45:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="步骤">步骤</h2><h3 id="新建hello_world工程">新建hello_world工程</h3><p>略</p>
<h3 id="配置单元测试">配置单元测试</h3><p>首先，确认在Build Variants窗口内的Test Artifact中选择了”Unit Tests”。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-ab4402443ad7dc5f.png" alt=""></p>
<p>然后，在工程的src文件夹内创建test和test/java文件夹。需要注意的是，你不能在Android视图下进行这些操作，要么在系统的文件管理器内创建，要么在工程窗口左上方点击下拉菜单选择Project视图。最终的工程结构应该是这样的：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-9e098817f6fcca44.png" alt=""></p>
<blockquote>
<p>配置成功之后<code>java</code>文件夹的颜色是绿色的</p>
</blockquote>
<p>最后，打开工程的build.gradle（Module:app）文件，添加JUnit4依赖，点击Gradle sync按钮。</p>
<p>在<code>build.gradle</code>中加入依赖</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span><br><span class="line">    compile 'com.android.support:appcompat-v7:22.1.1'</span><br><span class="line">    testCompile 'junit:junit:4.12'</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="创建第一个单元测试">创建第一个单元测试</h3><p>首先，创建一个非常简单的被测类：Calculator类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testing.testingexample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">substract</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">divide</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">multiply</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Android Studio提供了一个快速创建测试类的方法。只需在编辑器内右键点击Calculator类的声明，选择Go to &gt; Test，然后”Create a new test…”</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-729c021ff61b0dc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>在打开的对话窗口中，选择JUnit4和”setUp/@Before”，同时为所有的计算器运算生成测试方法。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-19f96a03d2fa811a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>这样，就会在正确的文件夹内(app/src/test/java/com/example/testing/testingexample)生成测试类框架，在框架内填入测试方法即可。下面是一个示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testing.testingexample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Calculator mCalculator;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mCalculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSum</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//expected: 6, sum of 1 and 5</span></span><br><span class="line">        assertEquals(<span class="number">6</span>d, mCalculator.sum(<span class="number">1</span>d, <span class="number">5</span>d), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSubstract</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">1</span>d, mCalculator.substract(<span class="number">5</span>d, <span class="number">4</span>d), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDivide</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">4</span>d, mCalculator.divide(<span class="number">20</span>d, <span class="number">5</span>d), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMultiply</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">10</span>d, mCalculator.multiply(<span class="number">2</span>d, <span class="number">5</span>d), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="运行单元测试">运行单元测试</h3><p>终于到运行测试的时候了！右键点击CalculatorTest类，选择Run &gt; CalculatorTest。也可以通过命令行运行测试，在工程目录内输入：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-00a07e968baebccc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="步骤">步骤</h2><h3 id="新建hello_world工程">新建hello_world工程</h3><p>略</p>
<h3 id="配置单元测试">配置单元测试</h3><p>首先，确认在Build Variants窗口内的Test Artifact中选择了”Unit Tests”。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-ab4402443ad7dc5f.png" alt=""></p>
<p>然后，在工程的src文件夹内创建test和test/java文件夹。需要注意的是，你不能在Android视图下进行这些操作，要么在系统的文件管理器内创建，要么在工程窗口左上方点击下拉菜单选择Project视图。最终的工程结构应该是这样的：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/580359-9e098817f6fcca44.png" alt=""></p>
<blockquote>
<p>配置成功之后<code>java</code>文件夹的颜色是绿色的</p>
</blockquote>
<p>最后，打开工程的build.gradle（Module:app）文件，添加JUnit4依赖，点击Gradle sync按钮。</p>
<p>在<code>build.gradle</code>中加入依赖</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="function">compile <span class="title">fileTree</span><span class="params">(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span></span><br><span class="line">    compile 'com.android.support:appcompat-v7:22.1.1'</span><br><span class="line">    testCompile 'junit:junit:4.12'</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="unit tests" scheme="http://yoursite.com/tags/unit-tests/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 触摸事件传递机制]]></title>
    <link href="http://yoursite.com/2015/07/14/Android%20%E8%A7%A6%E6%91%B8%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2015/07/14/Android 触摸事件传递机制/</id>
    <published>2015-07-14T12:13:00.000Z</published>
    <updated>2016-02-03T04:02:33.000Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="Android_触摸事件传递机制">Android 触摸事件传递机制</h1><p>之前在设置监听事件遇到了一些问题，今天参考学习了一些文档和博客，记录总结view和viewgroup的触摸事件传递</p>
<h2 id="View">View</h2><h3 id="常用监听方法">常用监听方法</h3><p>view表示没有子空间的布局，例如textview、button等，MotionEvent分为三种</p>
<ul>
<li>MotionEvent.ACTION_DOWN：按下时候</li>
<li>MotionEvent.ACTION_MOVE：滑动时</li>
<li>MotionEvent.ACTION_UP：抬起时</li>
</ul>
<p>常用两种监听事件</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">******.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;		</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">				<span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span> Auto-generated method stub</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">*******.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span></span>&#123;</span><br><span class="line">				<span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span> Auto-generated method stub</span></span><br><span class="line">	</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：setOnTouchListener中最后返回的是false</p>
</blockquote>
<p>通常一个按键触发的顺序是：</p>
<ol>
<li>onClick-&gt;MotionEvent.ACTION_DOWN</li>
<li>onClick-&gt;MotionEvent.ACTION_UP</li>
<li>OnClickListener</li>
</ol>
<p>若在setOnTouchListener返回true，则不会执行OnClickListener方法</p>
<h3 id="分析源码">分析源码</h3><p>在Button中并未发现dispatchTouchEvent代码，向上寻找，Button-&gt;TextVIew-&gt;View，在view中发现dispatchTouchEvent函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * Pass the touch screen motion event down to the target view, or this</span><br><span class="line">     * view if it is the target.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> event The motion event to be dispatched.</span><br><span class="line">     * <span class="doctag">@return</span> True if the event was handled by the view, false otherwise.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// If the event should be handled by accessibility focus first.</span></span><br><span class="line">        <span class="keyword">if</span> (event.isTargetAccessibilityFocus()) &#123;</span><br><span class="line">            <span class="comment">// We don't have focus or no virtual descendant has it, do not handle the event.</span></span><br><span class="line">            <span class="keyword">if</span> (!isAccessibilityFocusedViewOrHost()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// We have focus and got the event, then use normal event dispatch.</span></span><br><span class="line">            event.setTargetAccessibilityFocus(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mInputEventConsistencyVerifier.onTouchEvent(event, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> actionMasked = event.getActionMasked();</span><br><span class="line">        <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="comment">// Defensive cleanup for new gesture</span></span><br><span class="line">            stopNestedScroll();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</span><br><span class="line">            <span class="comment">//noinspection SimplifiableIfStatement</span></span><br><span class="line">            ListenerInfo li = mListenerInfo;</span><br><span class="line">            <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</span><br><span class="line">                    &amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</span><br><span class="line">                result = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</span><br><span class="line">                result = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>注意 if (li != null &amp;&amp; <strong>li.mOnTouchListener != null</strong>                    &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED                    &amp;&amp; li.mOnTouchListener.onTouch(this, event)) {</p>
<p>mOnTouchListener即注册的touch监听事件。</p>
<p>当li.mOnTouchListener 返回true时，result = true</p>
<p>在onTouchEvent中依次调用performClick()-&gt;li.mOnClickListener.onClick(this);</p>
<p>最终会回调用户注册的onclick函数</p>
<p>d</p>
<h3 id="测试代码">测试代码</h3><h4 id="主Activity">主Activity</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.xuyushi.toucheventtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.ActionBarActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.Menu;</span><br><span class="line"><span class="keyword">import</span> android.view.MenuItem;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ActionBarActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"TouchEventTest"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyButton button;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        button = (MyButton) findViewById(R.id.button_id);</span><br><span class="line"></span><br><span class="line">        button.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                        Log.d(TAG, <span class="string">"MainActivity-&gt;"</span> + <span class="string">"OnTouchListener()-&gt;"</span> + <span class="string">"ACTION_DOWN"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                        Log.d(TAG, <span class="string">"MainActivity-&gt;"</span> + <span class="string">"OnTouchListener()-&gt;"</span> + <span class="string">"ACTION_UP"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"MainActivity-&gt;"</span> + <span class="string">"OnClickListener()-&gt;"</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.d(TAG, <span class="string">"MainActivity-&gt;"</span> + <span class="string">"dispatchTouchEvent()-&gt;"</span>+<span class="string">"ACTION_DOWN"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.d(TAG, <span class="string">"MainActivity-&gt;"</span> + <span class="string">"dispatchTouchEvent()-&gt;"</span>+ <span class="string">"ACTION_UP"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.d(TAG, <span class="string">"MainActivity-&gt;"</span> + <span class="string">"onTouchEvent()-&gt;"</span>+<span class="string">"ACTION_DOWN"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.d(TAG, <span class="string">"MainActivity-&gt;"</span> + <span class="string">"onTouchEvent()-&gt;"</span>+ <span class="string">"ACTION_UP"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="自定义Button">自定义Button</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.xuyushi.toucheventtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by xuyushi on 15/8/2.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"TouchEventTest"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意 这里第二个参数不能省略，否则会导致崩溃，之后有时间学习研究</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyButton</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.d(TAG, <span class="string">"MyButton-&gt;"</span> + <span class="string">"onTouchEvent-&gt;"</span> + <span class="string">"ACTION_DOWN"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.d(TAG, <span class="string">"MyButton-&gt;"</span> + <span class="string">"onTouchEvent-&gt;"</span> + <span class="string">"ACTION_UP"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.d(TAG, <span class="string">"MyButton-&gt;"</span> + <span class="string">"dispatchTouchEvent-&gt;"</span> + <span class="string">"ACTION_DOWN"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.d(TAG, <span class="string">"MyButton-&gt;"</span> + <span class="string">"dispatchTouchEvent-&gt;"</span> + <span class="string">"ACTION_UP"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="布局文件">布局文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span> <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span> <span class="attribute">android:paddingLeft</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    <span class="attribute">android:paddingRight</span>=<span class="value">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    <span class="attribute">android:paddingTop</span>=<span class="value">"@dimen/activity_vertical_margin"</span></span><br><span class="line">    <span class="attribute">android:paddingBottom</span>=<span class="value">"@dimen/activity_vertical_margin"</span> <span class="attribute">tools:context</span>=<span class="value">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">io.github.xuyushi.toucheventtest.MyButton</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/button_id"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"button"</span></span><br><span class="line">        <span class="attribute">android:textSize</span>=<span class="value">"30dp"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="log">log</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">D/TouchEventTest﹕ MainActivity-&gt;dispatchTouchEvent()-&gt;ACTION_DOWN</span><br><span class="line">D/TouchEventTest﹕ MyButton-&gt;dispatchTouchEvent-&gt;ACTION_DOWN</span><br><span class="line">D/TouchEventTest﹕ MainActivity-&gt;OnTouchListener()-&gt;ACTION_DOWN</span><br><span class="line">D/TouchEventTest﹕ MyButton-&gt;onTouchEvent-&gt;ACTION_DOWN</span><br><span class="line">D/TouchEventTest﹕ MainActivity-&gt;dispatchTouchEvent()-&gt;ACTION_UP</span><br><span class="line">D/TouchEventTest﹕ MyButton-&gt;dispatchTouchEvent-&gt;ACTION_UP</span><br><span class="line">D/TouchEventTest﹕ MainActivity-&gt;OnTouchListener()-&gt;ACTION_UP</span><br><span class="line">D/TouchEventTest﹕ MyButton-&gt;onTouchEvent-&gt;ACTION_UP</span><br><span class="line">D/TouchEventTest﹕ MainActivity-&gt;OnClickListener()-&gt;</span><br></pre></td></tr></table></figure>
<h4 id="若修改MyButton_dispatchTouchEvent返回值为true时">若修改MyButton dispatchTouchEvent返回值为true时</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D/TouchEventTest﹕ MainActivity-&gt;dispatchTouchEvent()-&gt;ACTION_DOWN</span><br><span class="line">D/TouchEventTest﹕ MyButton-&gt;dispatchTouchEvent-&gt;ACTION_DOWN</span><br><span class="line">D/TouchEventTest﹕ MainActivity-&gt;dispatchTouchEvent()-&gt;ACTION_UP</span><br><span class="line">D/TouchEventTest﹕ MyButton-&gt;dispatchTouchEvent-&gt;ACTION_UP</span><br></pre></td></tr></table></figure>
<p>事件先由Activity的dispatchTouchEvent进行分发，然后TestButton的dispatchTouchEvent进行分发，接着执行onTouch监听，然后执行onTouchEvent。第二次UP动作的时候，在onTouchEvent里又执行了onClick监听</p>
<h4 id="若修改MyButton_onTouchEvent返回值为true时">若修改MyButton onTouchEvent返回值为true时</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D/TouchEventTest﹕ MainActivity-&gt;dispatchTouchEvent()-&gt;ACTION_DOWN</span><br><span class="line">D/TouchEventTest﹕ MyButton-&gt;dispatchTouchEvent-&gt;ACTION_DOWN</span><br><span class="line">D/TouchEventTest﹕ MainActivity-&gt;OnTouchListener()-&gt;ACTION_DOWN</span><br><span class="line">D/TouchEventTest﹕ MyButton-&gt;onTouchEvent-&gt;ACTION_DOWN</span><br><span class="line">D/TouchEventTest﹕ MainActivity-&gt;dispatchTouchEvent()-&gt;ACTION_UP</span><br><span class="line">D/TouchEventTest﹕ MyButton-&gt;dispatchTouchEvent-&gt;ACTION_UP</span><br><span class="line">D/TouchEventTest﹕ MainActivity-&gt;OnTouchListener()-&gt;ACTION_UP</span><br><span class="line">D/TouchEventTest﹕ MyButton-&gt;onTouchEvent-&gt;ACTION_UP</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：这里和参考博客的结果不一样，因为在dispatchTouchEvent源码中，进行之前做<strong> if (li != null &amp;&amp; </strong>li.mOnTouchListener != null<strong>                    &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED                    &amp;&amp; li.mOnTouchListener.onTouch(this, event)) {</strong>判断后，执行的是<code>result = true;</code>并不是 <code>return true;</code> 所以<code>onTouchEvent</code> 依然会执行</p>
</blockquote>
<p>所以只少一个 OnClickListener未执行</p>
<h2 id="ViewGroup">ViewGroup</h2><p>ViewGroup比View多一个onInterceptTouchEvent方法，此方法是用来拦截事件，拦截之后ViewGroup中的子布局是接受不到事件了。</p>
<h3 id="源码修改">源码修改</h3><h4 id="自定义布局">自定义布局</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.xuyushi.toucheventtest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.widget.LinearLayout;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by xuyushi on 15/8/2.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinearLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"TouchEventTest"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyLinearLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span> Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.i(TAG, <span class="string">"MyLinearLayout-&gt;"</span>+<span class="string">"dispatchTouchEvent-&gt;ACTION_DOWN"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.i(TAG, <span class="string">"MyLinearLayout-&gt;"</span>+<span class="string">"dispatchTouchEvent-&gt;ACTION_UP"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span> Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.i(TAG, <span class="string">"MyLinearLayout-&gt;"</span>+<span class="string">"onInterceptTouchEvent-&gt;ACTION_DOWN"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.i(TAG, <span class="string">"MyLinearLayout-&gt;"</span>+<span class="string">"onInterceptTouchEvent-&gt;ACTION_UP"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span> Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.i(TAG, <span class="string">"MyLinearLayout-&gt;"</span>+<span class="string">"onTouchEvent-&gt;ACTION_DOWN"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.i(TAG, <span class="string">"MyLinearLayout-&gt;"</span>+<span class="string">"onTouchEvent-&gt;ACTION_UP"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="主activity增加监听">主activity增加监听</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mylayout.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span> Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">switch</span>(event.getAction())&#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                Log.d(TAG, <span class="string">"MainActivity-&gt;"</span> + <span class="string">"setOnTouchListener()-&gt;"</span> + <span class="string">"ACTION_DOWN"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Log.d(TAG, <span class="string">"MainActivity-&gt;"</span> + <span class="string">"setOnTouchListener()-&gt;"</span> + <span class="string">"ACTION_UP"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">mylayout.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span> Auto-generated method stub</span></span><br><span class="line">        Log.i(TAG, <span class="string">"MainActivity--mylayout-onClick..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="LOG">LOG</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MainActivity-&gt;dispatchTouchEvent()-&gt;ACTION_DOWN</span><br><span class="line">MyLinearLayout-&gt;dispatchTouchEvent-&gt;ACTION_DOWN</span><br><span class="line">MyLinearLayout-&gt;onInterceptTouchEvent-&gt;ACTION_DOWN</span><br><span class="line">MyButton-&gt;dispatchTouchEvent-&gt;ACTION_DOWN</span><br><span class="line">MainActivity-&gt;OnTouchListener()-&gt;ACTION_DOWN</span><br><span class="line">MyButton-&gt;onTouchEvent-&gt;ACTION_DOWN</span><br><span class="line">MainActivity-&gt;dispatchTouchEvent()-&gt;ACTION_UP</span><br><span class="line">MyLinearLayout-&gt;dispatchTouchEvent-&gt;ACTION_UP</span><br><span class="line">MyLinearLayout-&gt;onInterceptTouchEvent-&gt;ACTION_UP</span><br><span class="line">MyButton-&gt;dispatchTouchEvent-&gt;ACTION_UP</span><br><span class="line">MainActivity-&gt;OnTouchListener()-&gt;ACTION_UP</span><br><span class="line">MyButton-&gt;onTouchEvent-&gt;ACTION_UP</span><br><span class="line">MyButton-&gt;<span class="built_in">test</span>Btn---onClick</span><br><span class="line">MainActivity-&gt;OnClickListener()</span><br></pre></td></tr></table></figure>
<p>如果将Linearlayout的onInterceptTouchEvent 改成return true</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MainActivity-&gt;dispatchTouchEvent()-&gt;ACTION_DOWN</span><br><span class="line">MyLinearLayout-&gt;dispatchTouchEvent-&gt;ACTION_DOWN</span><br><span class="line">MyLinearLayout-&gt;onInterceptTouchEvent-&gt;ACTION_DOWN</span><br><span class="line">MainActivity-&gt;OnTouchListener()-&gt;ACTION_DOWN</span><br><span class="line">MainActivity-&gt;dispatchTouchEvent()-&gt;ACTION_UP</span><br><span class="line">MyLinearLayout-&gt;dispatchTouchEvent-&gt;ACTION_UP</span><br><span class="line">MyLinearLayout-&gt;onInterceptTouchEvent-&gt;ACTION_UP</span><br><span class="line">MainActivity-&gt;OnTouchListener()-&gt;ACTION_UP</span><br><span class="line">MainActivity--mylayout-onClick...</span><br></pre></td></tr></table></figure>
<p>由此可见，当onInterceptTouchEvent 返回ture之后，button接受不到事件了，只执行MyLinearLayout中的OnTouch 和OnClick了</p>
<h2 id="总结">总结</h2><p>1、如果是自定义复合控件，如图片+文字，我再Activity里给你注册了onClick监听，期望点击它执行。那么最简单的方法就是将图片+文字的父布局，也即让其容器ViewGroup的秘书将事件拦下，这样父亲就可以执行onClick了。这时候的父亲就像一个独立的孩子一样了(View)，再也不用管它的孩子了,可以正常onClick onTouch.</p>
<p>2、如果希望一个View只onTouch而不onClick，在onTouch里return true就ok了。</p>
<p>3、dispatch是为了onTouch监听，onTouchEvent是为了onClick监听。</p>
<p>4、自定义布局时，一般情况下：</p>
<p>@Override</p>
<pre><code><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>{<span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onTouchEvent</span><span class="params">(event)</span></span>;}  
</code></pre><p>@Override</p>
<pre><code><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>{<span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">dispatchTouchEvent</span><span class="params">(event)</span></span>;

我们可以复写，但是最后的<span class="keyword">super</span>.***是万万不能少滴。如果少了，表示连dispatch*** onTouchEvent压根就不调用了，事件就此打住。
</code></pre><h1 id="Android_事件分发机制结论">Android 事件分发机制结论</h1><h2 id="View-1">View</h2><p>不管是DOWN，MOVE，UP都会按照下面的顺序执行：</p>
<ol>
<li>dispatchTouchEvent  （view中）</li>
<li>setOnTouchListener的onTouch （监听事件设置 activity 中）</li>
<li>onTouchEvent （view中）</li>
</ol>
<p>在dispatchTouchEvent中会进行OnTouchListener的判断，如果OnTouchListener不为null且返回true，则表示事件被消费，onTouchEvent不会被执行；否则执行onTouchEvent。</p>
<h2 id="ViewGroup-1">ViewGroup</h2><p>可以看到大体的事件流程为：<br>MyLinearLayout的dispatchTouchEvent -&gt; MyLinearLayout的onInterceptTouchEvent -&gt; MyButton的dispatchTouchEvent -&gt;Mybutton的onTouchEvent </p>
<p>可以看出，在View上触发事件，最先捕获到事件的为View所在的ViewGroup，然后才会到View自身~</p>
<h3 id="事件拦截">事件拦截</h3><p>ViewGroup 与 View 不同的是，可以对事件进行拦截，使子 view 是否能接受到事件。<br>复写ViewGroup的onInterceptTouchEvent方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span>  </span><br><span class="line"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> action = ev.getAction();  </span><br><span class="line">    <span class="keyword">switch</span> (action)  </span><br><span class="line">    &#123;  </span><br><span class="line">    <span class="keyword">case</span> MotionEvent.ACTION_DOWN:  </span><br><span class="line">        <span class="comment">//如果你觉得需要拦截  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span> ;   </span><br><span class="line">    <span class="keyword">case</span> MotionEvent.ACTION_MOVE:  </span><br><span class="line">        <span class="comment">//如果你觉得需要拦截  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span> ;   </span><br><span class="line">    <span class="keyword">case</span> MotionEvent.ACTION_UP:  </span><br><span class="line">        <span class="comment">//如果你觉得需要拦截  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span> ;   </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认是不拦截的，即返回false；如果你需要拦截，只要return true就行了，这要该事件就不会往子View传递了，并且如果你在DOWN retrun true ，则DOWN,MOVE,UP子View都不会捕获事件；如果你在MOVE return true , 则子View在MOVE和UP都不会捕获事件。</p>
<h3 id="如何不被拦截">如何不被拦截</h3><p>如果ViewGroup的onInterceptTouchEvent(ev) 当ACTION_MOVE时return true ，即拦截了子View的MOVE以及UP事件；</p>
<p>此时子View希望依然能够响应MOVE和UP时该咋办呢？</p>
<p>Android给我们提供了一个方法：requestDisallowInterceptTouchEvent(boolean) 用于设置是否允许拦截，我们在子View的dispatchTouchEvent中直接这么写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span>  </span><br><span class="line">    </span>&#123;  </span><br><span class="line">        getParent().requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);    </span><br><span class="line">        <span class="keyword">int</span> action = event.getAction();  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">switch</span> (action)  </span><br><span class="line">        &#123;  </span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:  </span><br><span class="line">            Log.e(TAG, <span class="string">"dispatchTouchEvent ACTION_DOWN"</span>);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:  </span><br><span class="line">            Log.e(TAG, <span class="string">"dispatchTouchEvent ACTION_MOVE"</span>);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:  </span><br><span class="line">            Log.e(TAG, <span class="string">"dispatchTouchEvent ACTION_UP"</span>);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">default</span>:  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(event);  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>getParent().requestDisallowInterceptTouchEvent(true);  这样即使ViewGroup在MOVE的时候return true，子View依然可以捕获到MOVE以及UP事件。</p>
<ol>
<li>如果ViewGroup找到了能够处理该事件的View，则直接交给子View处理，自己的onTouchEvent不会被触发；</li>
<li>可以通过复写onInterceptTouchEvent(ev)方法，拦截子View的事件（即return true），把事件交给自己处理，则会执行自己对应的onTouchEvent方法</li>
<li>子View可以通过调用getParent().requestDisallowInterceptTouchEvent(true);  阻止ViewGroup对其MOVE或者UP事件进行拦截；</li>
</ol>
<blockquote>
<p>比如你需要写一个类似slidingmenu的左侧隐藏menu，主Activity上有个Button、ListView或者任何可以响应点击的View，你在当前View上死命的滑动，菜单栏也出不来；因为MOVE事件被子View处理了~ 你需要这么做：在ViewGroup的dispatchTouchEvent中判断用户是不是想显示菜单，如果是，则在onInterceptTouchEvent(ev)拦截子View的事件；自己进行处理，这样自己的onTouchEvent就可以顺利展现出菜单栏了~~</p>
</blockquote>
<h1 id="参考">参考</h1><blockquote>
<p><a href="http://blog.csdn.net/yanzi1225627/article/details/22592831" target="_blank" rel="external">http://blog.csdn.net/yanzi1225627/article/details/22592831</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/9097463" target="_blank" rel="external">http://blog.csdn.net/guolin_blog/article/details/9097463</a><br><a href="http://www.cnblogs.com/sunzn/archive/2013/05/10/3064129.html" target="_blank" rel="external">http://www.cnblogs.com/sunzn/archive/2013/05/10/3064129.html</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h1 id="Android_触摸事件传递机制">Android 触摸事件传递机制</h1><p>之前在设置监听事件遇到了一些问题，今天参考学习了一些文档和博客，记录总结view和viewgroup的触摸事件传递</p>
<h2 id="View">View</h2><h3 id="常用监听方法">常用监听方法</h3><p>view表示没有子空间的布局，例如textview、button等，MotionEvent分为三种</p>
<ul>
<li>MotionEvent.ACTION_DOWN：按下时候</li>
<li>MotionEvent.ACTION_MOVE：滑动时</li>
<li>MotionEvent.ACTION_UP：抬起时</li>
</ul>
<p>常用两种监听事件</p>]]>
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="触摸事件" scheme="http://yoursite.com/tags/%E8%A7%A6%E6%91%B8%E4%BA%8B%E4%BB%B6/"/>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[volley学习]]></title>
    <link href="http://yoursite.com/2015/07/12/volley%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2015/07/12/volley学习/</id>
    <published>2015-07-12T09:13:00.000Z</published>
    <updated>2016-02-03T03:46:18.000Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="背景">背景</h2><p>Vollry特别适合数据量不大但是通信频繁的场景。</p>
<p>比如以前从网上下载图片的步骤可能这样的流程：</p>
<ul>
<li>在ListAdatpter-getview（）方法里开始图像的读取</li>
<li>通过AsyncTask等机制使用HttpURLConnection从服务器去读取图片资源</li>
<li>在AsyncTask-onPostExecute（）里设置相应的Imageview的属性</li>
</ul>
<p>而在Volley下，只需要一个函数即可<br><a id="more"></a></p>
<h2 id="Volley提供的功能：">Volley提供的功能：</h2><ul>
<li>JSON,图像等异步下载；</li>
<li>网络请求的排序</li>
<li>网络请求的优先级处理</li>
<li>缓存</li>
<li>多级别取消请求</li>
<li>和Activity的生命周期的联动（Activity结束的同时，取消所有网络请求）</li>
</ul>
<h2 id="下载volley_jar包">下载volley jar包</h2><h3 id="法1">法1</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://android.googlesource.com/platform/frameworks/volley</span><br><span class="line">$ <span class="built_in">cd</span> volley</span><br><span class="line">$ android update project -p .</span><br><span class="line">$ ant jar</span><br></pre></td></tr></table></figure>
<p>复制<code>bin/volley.jar</code> 到工程 <code>libs/</code>目录<br>在android studio中 add as library</p>
<h3 id="法2">法2</h3><p>直接下载 <a href="http://api.androidhive.info/volley/volley.jar" target="_blank" rel="external">http://api.androidhive.info/volley/volley.jar</a></p>
<h3 id="法3">法3</h3><p>gradle加入<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'com.mcxiaoke.volley:library:1.0.+'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>非官方的镜像</p>
</blockquote>
<h2 id="StringRequest的用法">StringRequest的用法</h2><h3 id="加上网络权限">加上网络权限</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.INTERNET"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="获取RequestQueue对象">获取RequestQueue对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RequestQueue mQueue = Volley.newRequestQueue(context);</span><br></pre></td></tr></table></figure>
<p>注意这里拿到的RequestQueue是一个请求队列对象，它可以缓存所有的HTTP请求，然后按照一定的算法并发地发出这些请求。RequestQueue内部的设计就是非常合适高并发的，因此我们不必为每一次HTTP请求都创建一个RequestQueue对象，这是非常浪费资源的，基本上在每一个需要和网络交互的Activity中创建一个RequestQueue对象就足够了。</p>
<h3 id="创建一个StringRequest对象">创建一个StringRequest对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">StringRequest stringRequest = <span class="keyword">new</span> StringRequest(<span class="string">"http://www.baidu.com"</span>,</span><br><span class="line">		<span class="keyword">new</span> Response.Listener&lt;String&gt;() &#123;</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String response)</span> </span>&#123;</span><br><span class="line">				Log.d(<span class="string">"TAG"</span>, response);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError error)</span> </span>&#123;</span><br><span class="line">		Log.e(<span class="string">"TAG"</span>, error.getMessage(), error);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>参数1：目标服务器地址<br>参数2：响应成功的回调函数<br>参数3：响应十八的回调函数</p>
<h3 id="将这个StringRequest对象添加到RequestQueue">将这个StringRequest对象添加到RequestQueue</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mQueue.add(stringRequest);</span><br></pre></td></tr></table></figure>
<h2 id="post请求">post请求</h2><p>Volley会尝试调用StringRequest的父类——Request中的getParams()方法来获取POST参数,，我们只需要在StringRequest的匿名类中重写getParams()方法，在这里设置POST参数就可以了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">StringRequest stringRequest = <span class="keyword">new</span> StringRequest(Method.POST, url,  listener, errorListener) &#123;  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="keyword">protected</span> Map&lt;String, String&gt; getParams() <span class="keyword">throws</span> AuthFailureError &#123;  </span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();  </span><br><span class="line">        map.put(<span class="string">"params1"</span>, <span class="string">"value1"</span>);  </span><br><span class="line">        map.put(<span class="string">"params2"</span>, <span class="string">"value2"</span>);  </span><br><span class="line">        <span class="keyword">return</span> map;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="JsonRequest的用法">JsonRequest的用法</h2><p>JsonRequest有两个直接的子类<br>JsonObjectRequest和JsonArrayRequest，从名字上你应该能就看出它们的区别了吧？一个是用于请求一段JSON数据的，一个是用于请求一段JSON数组的</p>
<p>同理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">JsonObjectRequest jsonObjectRequest = <span class="keyword">new</span> JsonObjectRequest(<span class="string">"http://m.weather.com.cn/data/101010100.html"</span>, <span class="keyword">null</span>,  </span><br><span class="line">        <span class="keyword">new</span> Response.Listener&lt;JSONObject&gt;() &#123;  </span><br><span class="line">            <span class="annotation">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(JSONObject response)</span> </span>&#123;  </span><br><span class="line">                Log.d(<span class="string">"TAG"</span>, response.toString());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;, <span class="keyword">new</span> Response.ErrorListener() &#123;  </span><br><span class="line">            <span class="annotation">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError error)</span> </span>&#123;  </span><br><span class="line">                Log.e(<span class="string">"TAG"</span>, error.getMessage(), error);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mQueue.add(jsonObjectRequest);</span><br></pre></td></tr></table></figure>
<h2 id="使用Volley加载网络图片">使用Volley加载网络图片</h2><h3 id="ImageRequest的用法">ImageRequest的用法</h3><h4 id="创建RequestQueue对象">创建RequestQueue对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RequestQueue mQueue = Volley.newRequestQueue(context);</span><br></pre></td></tr></table></figure>
<h4 id="实例化ImageRequest对象">实例化ImageRequest对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getImg</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">	RequestQueue mQueue = Volley.newRequestQueue(<span class="keyword">this</span>);</span><br><span class="line">	ImageRequest imageRequest = <span class="keyword">new</span> ImageRequest(</span><br><span class="line">			<span class="string">"http://avatar.csdn.net/blogpic/20140903135550859.jpg"</span>,</span><br><span class="line">			<span class="keyword">new</span> Response.Listener&lt;Bitmap&gt;() &#123;</span><br><span class="line">				<span class="annotation">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Bitmap response)</span> </span>&#123;</span><br><span class="line">					imageView.setImageBitmap(response);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;, <span class="number">0</span>, <span class="number">0</span>, Bitmap.Config.RGB_565, <span class="keyword">new</span> Response.ErrorListener() &#123;</span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError error)</span> </span>&#123;</span><br><span class="line">			imageView.setImageResource(R.mipmap.ic_launcher);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure>
<p>参数1：图片地址<br>参数2：回调函数，在此把接受的bitmap设置到imageView中<br>参数3：图片最大宽度<br>参数4：图片最大高度<br>参数5：图片的颜色（ARGB_8888最好的颜色。RGB_565每个像素2字节）</p>
<h4 id="imageRequest加入队列">imageRequest加入队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mQueue.add(imageRequest);</span><br></pre></td></tr></table></figure>
<h3 id="ImageLoader的用法">ImageLoader的用法</h3><ol>
<li>创建一个RequestQueue对象。</li>
<li>创建一个ImageLoader对象。</li>
<li>获取一个ImageListener对象。</li>
<li>调用ImageLoader的get()方法加载网络上的图片。<h4 id="新建一个ImageLoader对">新建一个ImageLoader对</h4></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ImageLoader imageLoader = <span class="keyword">new</span> ImageLoader(mQueue, <span class="keyword">new</span> ImageCache() &#123;  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putBitmap</span><span class="params">(String url, Bitmap bitmap)</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmap</span><span class="params">(String url)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>参数1：RequestQueue<br>参数2：ImageCache对象</p>
<h4 id="获取一个ImageListener对象">获取一个ImageListener对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ImageListener listener = ImageLoader.getImageListener(imageView,  </span><br><span class="line">        R.drawable.default_image, R.drawable.failed_image);</span><br></pre></td></tr></table></figure>
<p>我们通过调用ImageLoader的getImageListener()方法能够获取到一个ImageListener对象，getImageListener()方法接收三个参数，第一个参数指定用于显示图片的ImageView控件，第二个参数指定加载图片的过程中显示的图片，第三个参数指定加载图片失败的情况下显示的图片。</p>
<h4 id="调用ImageLoader的get()方法来加载图片">调用ImageLoader的get()方法来加载图片</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imageLoader.get(<span class="string">"http://img.my.csdn.net/uploads/201404/13/1397393290_5765.jpeg"</span>, listener);</span><br></pre></td></tr></table></figure>
<h4 id="cache的实现">cache的实现</h4><p>BitmapCache并实现了ImageCache接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitmapCache</span> <span class="keyword">implements</span> <span class="title">ImageCache</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> LruCache&lt;String, Bitmap&gt; mCache;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitmapCache</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> maxSize = <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>;  </span><br><span class="line">        mCache = <span class="keyword">new</span> LruCache&lt;String, Bitmap&gt;(maxSize) &#123;  </span><br><span class="line">            <span class="annotation">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap bitmap)</span> </span>&#123;  </span><br><span class="line">                <span class="keyword">return</span> bitmap.getRowBytes() * bitmap.getHeight();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getBitmap</span><span class="params">(String url)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> mCache.get(url);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putBitmap</span><span class="params">(String url, Bitmap bitmap)</span> </span>&#123;  </span><br><span class="line">        mCache.put(url, bitmap);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到，这里我们将缓存图片的大小设置为10M。接着修改创建ImageLoader实例的代码，第二个参数传入BitmapCache的实例，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImageLoader imageLoader = <span class="keyword">new</span> ImageLoader(mQueue, <span class="keyword">new</span> BitmapCache());</span><br></pre></td></tr></table></figure></p>
<p>除了以上两种方式之外，Volley还提供了第三种方式来加载网络图片，即使用NetworkImageView。不同于以上两种方式，NetworkImageView是一个自定义控制，它是继承自ImageView的，具备ImageView控件的所有功能，并且在原生的基础之上加入了加载网络图片的功能。NetworkImageView控件的用法要比前两种方式更加简单，大致可以分为以下五步：</p>
<ol>
<li>创建一个RequestQueue对象。</li>
<li>创建一个ImageLoader对象。</li>
<li>在布局文件中添加一个NetworkImageView控件。</li>
<li>在代码中获取该控件的实例。</li>
<li>设置要加载的图片地址。</li>
</ol>
<p>其中，第一第二步和ImageLoader的用法是完全一样的，因此这里我们就从第三步开始学习了。首先修改布局文件中的代码，在里面加入NetworkImageView控件，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>  </span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span>  </span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"fill_parent"</span>  </span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span> &gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="title">Button</span>  </span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/button"</span>  </span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span>  </span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>  </span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"Send Request"</span> /&gt;</span>  </span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="title">com.android.volley.toolbox.NetworkImageView</span>   </span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"@+id/network_image_view"</span>  </span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"200dp"</span>  </span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"200dp"</span>  </span><br><span class="line">        <span class="attribute">android:layout_gravity</span>=<span class="value">"center_horizontal"</span>  </span><br><span class="line">        /&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>获取控件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">networkImageView = (NetworkImageView) findViewById(R.id.network_image_view);</span><br></pre></td></tr></table></figure></p>
<p>得到了NetworkImageView控件的实例之后，我们可以调用它的setDefaultImageResId()方法、setErrorImageResId()方法和setImageUrl()方法来分别设置加载中显示的图片，加载失败时显示的图片，以及目标图片的URL地址，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">networkImageView.setDefaultImageResId(R.drawable.default_image);  </span><br><span class="line">networkImageView.setErrorImageResId(R.drawable.failed_image);  </span><br><span class="line">networkImageView.setImageUrl(<span class="string">"http://img.my.csdn.net/uploads/201404/13/1397393290_5765.jpeg"</span>,  </span><br><span class="line">                imageLoader);</span><br></pre></td></tr></table></figure></p>
<p>NetworkImageView并不需要提供任何设置最大宽高的方法也能够对加载的图片进行压缩。这是由于NetworkImageView是一个控件，在加载图片的时候它会自动获取自身的宽高，然后对比网络图片的宽度，再决定是否需要对图片进行压缩。也就是说，压缩过程是在内部完全自动化的，并不需要我们关心，NetworkImageView会始终呈现给我们一张大小刚刚好的网络图片，不会多占用任何一点内存，这也是NetworkImageView最简单好用的一点吧。</p>
<blockquote>
<p>转自 ：<a href="http://blog.csdn.net/guolin_blog/article/details/17482165" target="_blank" rel="external">http://blog.csdn.net/guolin_blog/article/details/17482165</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h2 id="背景">背景</h2><p>Vollry特别适合数据量不大但是通信频繁的场景。</p>
<p>比如以前从网上下载图片的步骤可能这样的流程：</p>
<ul>
<li>在ListAdatpter-getview（）方法里开始图像的读取</li>
<li>通过AsyncTask等机制使用HttpURLConnection从服务器去读取图片资源</li>
<li>在AsyncTask-onPostExecute（）里设置相应的Imageview的属性</li>
</ul>
<p>而在Volley下，只需要一个函数即可<br>]]>
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="volley" scheme="http://yoursite.com/tags/volley/"/>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android View 小结（上）]]></title>
    <link href="http://yoursite.com/2015/07/09/Android%20View%20%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2015/07/09/Android View 小结/</id>
    <published>2015-07-09T11:12:00.000Z</published>
    <updated>2016-02-03T03:45:59.000Z</updated>
    <content type="html"><![CDATA[<h1 id="Android_View_小结">Android View 小结</h1><p>本文介绍了 Android 自定义 View 的基本步骤<br><a id="more"></a></p>
<h2 id="LayoutInflater分析">LayoutInflater分析</h2><p>功能：加载布局的</p>
<p>Activity中调用setContentView()方法也是调用LayoutInflater()完成加载布局的</p>
<h3 id="使用步骤">使用步骤</h3><p>-获取LayoutInflater的实例</p>
<p>法1:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LayoutInflater layoutInflater = LayoutInflater.from(context);</span><br></pre></td></tr></table></figure>
<p>法2:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LayoutInflater layoutInflater = (LayoutInflater) context  </span><br><span class="line">        .getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br></pre></td></tr></table></figure>
<p>-使用inflate()方法加载布局</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layoutInflater.inflate(resourceId, root);</span><br></pre></td></tr></table></figure>
<p>参数1:需要加载的布局Id</p>
<p>参数2:是指给该布局的外部再嵌套一层父布局，如果不需要就直接传null。这样就成功成功创建了一个布局的实例，之后再将它添加到指定的位置就可以显示出来了。</p>
<h3 id="举例">举例</h3><h4 id="定义一个button_layout-xml">定义一个button_layout.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Button</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:text</span>=<span class="value">"button"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">Button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="MainActivity中">MainActivity中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    LayoutInflater layoutInflater = LayoutInflater.from(<span class="keyword">this</span>);</span><br><span class="line">    mainLayout = (LinearLayout) findViewById(R.id.activity_main);</span><br><span class="line">    View buttonLayout = layoutInflater.inflate(R.layout.bytton_layout, <span class="keyword">null</span>);</span><br><span class="line">    mainLayout.addView(buttonLayout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时即可将<code>button_layout.xml</code>加载进来</p>
<p>测试若想调整<code>button_layout.xml</code>的大小，修改<code>android:layout_width</code>是没有效果的，必须将button_layout.xml 放入一个layout中，跳转layout的大小来。</p>
<p>而setContentView()方法中的子控件可以调整大小是因为，Android会自动在布局文件的最外层再嵌套一个FrameLayout，所以layout_width和layout_height属性才会有效果。</p>
<h3 id="分析源码">分析源码</h3><p>View inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot):pull解析xml</p>
<pre><code>-<span class="ruby">&gt;<span class="constant">View</span> temp = createViewFromTag(name, attrs); 根据节点名来创建<span class="constant">View</span>对象的
</span>
    -<span class="ruby">&gt;createView() 创建view实例并且返回
</span>
-<span class="ruby">&gt;rInflate()循环遍历这个根布局下的子元素
</span>
    -<span class="ruby">&gt; rInflate()递归调用，查找这个<span class="constant">View</span>下的子元素，每次递归完成后则将这个<span class="constant">View</span>添加到父布局当中</span>
</code></pre><h2 id="View的绘制过程">View的绘制过程</h2><h3 id="onMeasure()">onMeasure()</h3><p>功能：测量视图的大小的</p>
<p>View系统的绘制流程会从ViewRoot的performTraversals()方法中开始，在其内部调用View的measure()方法。measure()方法接收两个参数，widthMeasureSpec和heightMeasureSpec，这两个值分别用于确定视图的宽度和高度的规格和大小。</p>
<p>MeasureSpec的值由specSize和specMode共同组成的，其中specSize记录的是大小，specMode记录的是规格。specMode一共有三种类型，如下所示：</p>
<p>-EXACTLY</p>
<p>表示父视图希望子视图的大小应该是由specSize的值来决定的，系统默认会按照这个规则来设置子视图的大小，开发人员当然也可以按照自己的意愿设置成任意的大小。</p>
<p>-AT_MOST</p>
<p>表示子视图最多只能是specSize中指定的大小，开发人员应该尽可能小得去设置这个视图，并且保证不会超过specSize。系统默认会按照这个规则来设置子视图的大小，开发人员当然也可以按照自己的意愿设置成任意的大小。</p>
<p>-UNSPECIFIED</p>
<p>表示开发人员可以将视图按照自己的意愿设置成任意的大小，没有任何限制。这种情况比较少见，不太会用到。</p>
<p>widthMeasureSpec和heightMeasureSpec两个值都是由父视图经过计算后传递给子视图的，说明父视图会在一定程度上决定子视图的大小</p>
<p>measure()这个方法是final的，因此我们无法在子类中去重写这个方法，说明Android是不允许我们改变View的measure框架的。然后在第9行调用了onMeasure()方法，这里才是真正去测量并设置View大小的地方，默认会调用getDefaultSize()方法来获取视图的大小，</p>
<p>onMeasure()方法是可以重写的，也就是说，如果你不想使用系统默认的测量方式，可以按照自己的意愿进行定制，比如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    ......  </span><br><span class="line">      </span><br><span class="line">    <span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;  </span><br><span class="line">        setMeasuredDimension(<span class="number">200</span>, <span class="number">200</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的话就把View默认的测量流程覆盖掉了，不管在布局文件中定义MyView这个视图的大小是多少，最终在界面上显示的大小都将会是200*200。</p>
<p>需要注意的是，在setMeasuredDimension()方法调用之后，我们才能使用getMeasuredWidth()和getMeasuredHeight()来获取视图测量出的宽高，以此之前调用这两个方法得到的值都会是0。</p>
<p>由此可见，视图大小的控制是由父视图、布局文件、以及视图本身共同完成的，父视图会提供给子视图参考的大小，而开发人员可以在XML文件中指定视图的大小，然后视图本身会对最终的大小进行拍板。</p>
<h3 id="onLayout()">onLayout()</h3><p>ViewRoot的performTraversals()方法会在measure结束后继续执行，并调用View的layout()方法来执行此过程</p>
<p>View中的onLayout()方法就是一个空方法，因为onLayout()过程是为了确定视图在布局中所在的位置，而这个操作应该是由布局来完成的，即父视图决定子视图的显示位置。</p>
<h3 id="onDraw()">onDraw()</h3><p>ViewRoot中的代码会继续执行并创建出一个Canvas对象，然后调用View的draw()方法来执行具体的绘制工作。draw()方法内部的绘制过程总共可以分为六步，其中第二步和第五步在一般情况下很少用到，因此这里我们只分析简化后的绘制过程。代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (ViewDebug.TRACE_HIERARCHY) &#123;  </span><br><span class="line">        ViewDebug.trace(<span class="keyword">this</span>, ViewDebug.HierarchyTraceType.DRAW);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> privateFlags = mPrivateFlags;  </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> dirtyOpaque = (privateFlags &amp; DIRTY_MASK) == DIRTY_OPAQUE &amp;&amp;  </span><br><span class="line">            (mAttachInfo == <span class="keyword">null</span> || !mAttachInfo.mIgnoreDirtyState);  </span><br><span class="line">    mPrivateFlags = (privateFlags &amp; ~DIRTY_MASK) | DRAWN;  </span><br><span class="line">    <span class="comment">// Step 1, draw the background, if needed  </span></span><br><span class="line">    <span class="keyword">int</span> saveCount;  </span><br><span class="line">    <span class="keyword">if</span> (!dirtyOpaque) &#123;  </span><br><span class="line">        <span class="keyword">final</span> Drawable background = mBGDrawable;  </span><br><span class="line">        <span class="keyword">if</span> (background != <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> scrollX = mScrollX;  </span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> scrollY = mScrollY;  </span><br><span class="line">            <span class="keyword">if</span> (mBackgroundSizeChanged) &#123;  </span><br><span class="line">                background.setBounds(<span class="number">0</span>, <span class="number">0</span>,  mRight - mLeft, mBottom - mTop);  </span><br><span class="line">                mBackgroundSizeChanged = <span class="keyword">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> ((scrollX | scrollY) == <span class="number">0</span>) &#123;  </span><br><span class="line">                background.draw(canvas);  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                canvas.translate(scrollX, scrollY);  </span><br><span class="line">                background.draw(canvas);  </span><br><span class="line">                canvas.translate(-scrollX, -scrollY);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> viewFlags = mViewFlags;  </span><br><span class="line">    <span class="keyword">boolean</span> horizontalEdges = (viewFlags &amp; FADING_EDGE_HORIZONTAL) != <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">boolean</span> verticalEdges = (viewFlags &amp; FADING_EDGE_VERTICAL) != <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (!verticalEdges &amp;&amp; !horizontalEdges) &#123;  </span><br><span class="line">        <span class="comment">// Step 3, draw the content  </span></span><br><span class="line">        <span class="keyword">if</span> (!dirtyOpaque) onDraw(canvas);  </span><br><span class="line">        <span class="comment">// Step 4, draw the children  </span></span><br><span class="line">        dispatchDraw(canvas);  </span><br><span class="line">        <span class="comment">// Step 6, draw decorations (scrollbars)  </span></span><br><span class="line">        onDrawScrollBars(canvas);  </span><br><span class="line">        <span class="comment">// we're done...  </span></span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="视图重绘">视图重绘</h2><p>调用视图的setVisibility()、setEnabled()、setSelected()等方法时都会导致视图重绘，而如果我们想要手动地强制让视图进行重绘，可以调用invalidate()方法来实现</p>
<p>-&gt; invalidate()</p>
<pre><code>-&gt;skipInvalidate<span class="literal">()</span>判断是否许重绘

-&gt; invalidateChild<span class="literal">()</span>

    -&gt; invalidateChildInParent<span class="literal">()</span>

        -&gt; invalidateChild<span class="literal">()</span>

            -&gt; scheduleTraversals<span class="literal">()</span>

                -&gt; sendEmptyMessage(<span class="type">DO_TRAVERSAL</span>); 

                    handler 接受

                    - &gt; performTraversals<span class="literal">()</span> [onmeasure的入口]

    不断地获取当前布局的父布局，并调用它的invalidateChildInParent<span class="literal">()</span>方法，当循环到最外层的根布局后，就会调用<span class="type">ViewRoot</span>的invalidateChildInParent<span class="literal">()</span>方法了，仅仅是去调用了invalidateChild<span class="literal">()</span>方法而
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Android_View_小结">Android View 小结</h1><p>本文介绍了 Android 自定义 View 的基本步骤<br>]]>
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="view" scheme="http://yoursite.com/tags/view/"/>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[wifi压力测试]]></title>
    <link href="http://yoursite.com/2015/07/09/wifi%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2015/07/09/wifi压力测试/</id>
    <published>2015-07-09T11:12:00.000Z</published>
    <updated>2016-02-03T03:46:23.000Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="效果图">效果图</h2><p><img src="https://raw.githubusercontent.com/xuyushi/Blog_img/master/wifitest.gif" alt="效果图"></p>
<p>开关wifi<br>并且在开wifi后，判断网络连接<br>由于存在wifi连接之后并没有网络的情况，所以采用ping 来判断网络的通断<br><a id="more"></a></p>
<h2 id="AndroidManifest中申请权限">AndroidManifest中申请权限</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.ACCESS_WIFI_STATE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.CHANGE_WIFI_STATE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.CHANGE_NETWORK_STATE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.WAKE_LOCK"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.INTERNET"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.WRITE_SETTINGS"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="控件，界面初始化">控件，界面初始化</h2><p>  详见源码</p>
<h2 id="循环任务">循环任务</h2><p>使用timer来实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startTest</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">       isRunning = <span class="keyword">true</span>;</span><br><span class="line">       mTimer = <span class="keyword">new</span> Timer();</span><br><span class="line">       mTimer.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">           <span class="annotation">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (!isRunning || (mMaxTestCount != <span class="number">0</span> &amp;&amp; mCurrentCount &gt;= mMaxTestCount)) &#123;</span><br><span class="line">                   mHandler.sendEmptyMessage(<span class="number">0</span>);</span><br><span class="line">                   mTimer.cancel();</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (mWifiManager.getWifiState() == mWifiManager.WIFI_STATE_DISABLED) &#123;</span><br><span class="line">                       mWifiManager.setWifiEnabled(<span class="keyword">true</span>);</span><br><span class="line">                       Log.d(TAG, <span class="string">"*********wifistate is closed, try open wifi now!*****"</span>);</span><br><span class="line">                   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mWifiManager.getWifiState() == mWifiManager.WIFI_STATE_ENABLED) &#123;</span><br><span class="line">                       pingIpAddr();</span><br><span class="line">                       <span class="keyword">if</span> (<span class="keyword">null</span> != mPingIpAddrResult) &#123;</span><br><span class="line">                           Log.d(TAG, mPingIpAddrResult);</span><br><span class="line">                       &#125;</span><br><span class="line">                       mWifiManager.setWifiEnabled(<span class="keyword">false</span>);</span><br><span class="line">                       Log.d(TAG, <span class="string">"*********wifistate is opened, try close wifi now!******"</span>);</span><br><span class="line">                       incCurCount();</span><br><span class="line">                   &#125;</span><br><span class="line">                   mHandler.sendEmptyMessage(<span class="number">1</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, <span class="number">2000</span>, <span class="number">10000</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>判断 isRunning 标志位，</p>
<ul>
<li>如果为！isRunning ，或者任务的次数执行完毕，则取消定时任务。并且发送message(0)</li>
<li>如果为！isRunning，切换wifi的状态，并在wifi开的适合判断网络连接，并且发送message（1）</li>
</ul>
<h3 id="判断网络通断代码">判断网络通断代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pingIpAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span>: Hardcoded for now, make it UI configurable</span></span><br><span class="line">            Process p = Runtime.getRuntime().exec(<span class="string">"ping -c 1 -w 7 "</span> + mIpAddress);</span><br><span class="line">            <span class="keyword">int</span> status = p.waitFor();</span><br><span class="line">            <span class="keyword">if</span> (status == <span class="number">0</span>) &#123;</span><br><span class="line">                mPingIpAddrResult = <span class="string">"Pass"</span>;</span><br><span class="line">                mPassCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mPingIpAddrResult = <span class="string">"Fail: IP addr not reachable"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            mPingIpAddrResult = <span class="string">"Fail: IOException"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            mPingIpAddrResult = <span class="string">"Fail: InterruptedException"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>通过<code>Runtime.getRuntime().exec</code>来执行命令行<br><code>status = p.waitFor();</code>来获取运行结果。</p>
<blockquote>
<p>p.waitFor会阻塞</p>
</blockquote>
<h2 id="自定义handle处理消息">自定义handle处理消息</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(android.os.Message msg)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">              <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                  isRunning = <span class="keyword">false</span>;</span><br><span class="line">                  <span class="keyword">if</span> (mTimer != <span class="keyword">null</span>)</span><br><span class="line">                      mTimer.cancel();</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                  currentCount.setText(getString(R.string.current_count) + mCurrentCount);</span><br><span class="line">                  passCount.setText(getString(R.string.pass_count) + mPassCount);</span><br><span class="line">                  Log.d(TAG, <span class="string">"already test time:"</span> + mCurrentCount);</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">default</span>:</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p>源码：<a href="https://github.com/xuyushi/WifiTest" target="_blank" rel="external">https://github.com/xuyushi/WifiTest</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h2 id="效果图">效果图</h2><p><img src="https://raw.githubusercontent.com/xuyushi/Blog_img/master/wifitest.gif" alt="效果图"></p>
<p>开关wifi<br>并且在开wifi后，判断网络连接<br>由于存在wifi连接之后并没有网络的情况，所以采用ping 来判断网络的通断<br>]]>
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="wifi" scheme="http://yoursite.com/tags/wifi/"/>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[listview的复用机制]]></title>
    <link href="http://yoursite.com/2015/07/09/listview%E7%9A%84%E5%A4%8D%E7%94%A8%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2015/07/09/listview的复用机制/</id>
    <published>2015-07-09T11:12:00.000Z</published>
    <updated>2016-02-03T03:46:04.000Z</updated>
    <content type="html"><![CDATA[<h1 id="listview的复用机制">listview的复用机制</h1><p>本文介绍了listview的复用机制<br><a id="more"></a></p>
<p>listview 的item只会创建一定数量，只会创建的view会复用之前的</p>
<p>测试代码如下</p>
<p>自定义一个adapter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by xuyushi on 15/8/9.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">ArrayAdapter</span>&lt;<span class="title">String</span> &gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MyAdapter"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> resourceId ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(Context context, <span class="keyword">int</span> textViewResourceId, List&lt;String&gt; objects)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, textViewResourceId, objects);</span><br><span class="line">        <span class="keyword">this</span>.resourceId = textViewResourceId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ViewHolder myViews;</span><br><span class="line">        String string =  getItem(position);</span><br><span class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"为空："</span> + position);</span><br><span class="line">            myViews = <span class="keyword">new</span> ViewHolder();</span><br><span class="line">            convertView = LayoutInflater.from(getContext()).inflate(resourceId, <span class="keyword">null</span>);</span><br><span class="line">            myViews.mNameText = (TextView) convertView.findViewById(R.id.list_item);</span><br><span class="line">            convertView.setTag(myViews);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            myViews = (ViewHolder) convertView.getTag();</span><br><span class="line">            Log.d(TAG, <span class="string">"不为空："</span> + position);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        myViews.mNameText.setText(string);</span><br><span class="line">        <span class="keyword">return</span> convertView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> TextView mNameText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到 随着listview 往下滚动，打印的都为”不为空”</p>
<p>那么问题来了</p>
<p>比如异步加载图片，最终造成界面显示的混乱</p>
<p>举个例子：listview中有一个imageview，动态的加载网络图片</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span>  </span><br><span class="line">    </span>&#123;  </span><br><span class="line">        <span class="keyword">final</span> String url = getItem(position);  </span><br><span class="line">        View view;  </span><br><span class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            view = LayoutInflater.from(getContext()).inflate(R.layout.photo_layout, <span class="keyword">null</span>);  </span><br><span class="line">        &#125; <span class="keyword">else</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            view = convertView;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">final</span> ImageView photo = (ImageView) view.findViewById(R.id.photo);  </span><br><span class="line">        <span class="comment">// 给ImageView设置一个Tag，保证异步加载图片时不会乱序  </span></span><br><span class="line">        photo.setTag(url);  </span><br><span class="line">        <span class="keyword">new</span> LoadImgTask(photo).execute(url);  </span><br><span class="line">        <span class="keyword">return</span> view;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>当第一页的imageview开启异步线程加载图片时候，listview下翻，新的item会复用之前恩item，而且setTag会覆盖之前的tag。当第一屏的ItemView的图片下载完成后，如果直接findViewByTag然后设置图片会显示在第二屏上，就混乱了，所以一般在显示前都会判断photo.getTag().equals(url);确定了再显示。也就是说第一屏的ItemView图片下载完了，但是Tag被覆盖了，所以即使下载完成了，也不会有任何显示。这就解释了为什么我们防止混乱的代码需要那样去写。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="listview的复用机制">listview的复用机制</h1><p>本文介绍了listview的复用机制<br>]]>
    
    </summary>
    
      <category term="listview" scheme="http://yoursite.com/tags/listview/"/>
    
      <category term="view" scheme="http://yoursite.com/tags/view/"/>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[loader 总结]]></title>
    <link href="http://yoursite.com/2015/07/05/loader%20%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2015/07/05/loader 总结/</id>
    <published>2015-07-05T07:57:00.000Z</published>
    <updated>2016-02-03T03:46:31.000Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="本文实现的功能">本文实现的功能</h2><p>在listfragment使用自定义的adpter现实数据库的数据，当数据库的数据发生变化时，自动刷新</p>
<p>效果如下<br><img src="https://raw.githubusercontent.com/xuyushi/Blog_img/master/loader1.gif" alt="loader"><br><a id="more"></a></p>
<h2 id="用到的知识点">用到的知识点</h2><ol>
<li>listfragment</li>
<li><a href="http://xuyushi.github.io/2015/06/29/GreenDao学习/" target="_blank" rel="external">GreenDao</a></li>
<li>自定义loader</li>
<li>自定义adapter</li>
<li>loaderManger</li>
<li>contentobserver监听数据库</li>
</ol>
<h2 id="实现过程">实现过程</h2><h3 id="数据库的简历">数据库的简历</h3><p>不做过多分析，详见<a href="http://xuyushi.github.io/2015/06/29/GreenDao学习/" target="_blank" rel="external">GreenDao</a><br>建立了student表，包括</p>
<ol>
<li>id</li>
<li>name</li>
<li>age</li>
</ol>
<p>在DBHleper中实现了以下增加，删除的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addToStudentTable</span><span class="params">(de.greenrobot.daoexample.Student student)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == Student) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == student) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Student.insert(student);</span><br><span class="line">    <span class="keyword">if</span> (mObserver!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        mObserver.onChange(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Student.loadAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student.deleteAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在MainActivity的onCreat方法初始化数据库<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DBHelper.getInstance(<span class="keyword">this</span>).clearStudent();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; STUDENT_NUM;i++) &#123;</span><br><span class="line">        student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setName(<span class="string">"testname"</span>+i);</span><br><span class="line">        student.setAge(<span class="number">10</span>+i);</span><br><span class="line">        DBHelper.getInstance(<span class="keyword">this</span>).addToStudentTable(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在主界面中增加一个按钮，用来增加数据库，用来观测loader是否刷新List<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add_sth</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    student = <span class="keyword">new</span> Student();</span><br><span class="line">    student.setName(<span class="string">"createdByButton"</span>);</span><br><span class="line">    student.setAge(<span class="number">100</span>);</span><br><span class="line">    DBHelper.getInstance(<span class="keyword">this</span>).addToStudentTable(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="实现自定义adapter">实现自定义adapter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mresourceId; <span class="comment">//对应的xml布局文件，也可以不传出来，在getView中写死。</span></span><br><span class="line">    <span class="keyword">private</span> Context mcontext;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; mdata;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentAdapter</span><span class="params">(Context context, <span class="keyword">int</span> resourceId, List&lt;Student&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        mresourceId = resourceId;</span><br><span class="line">        mcontext = context;</span><br><span class="line">        mdata = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mdata.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mdata.get(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//convertView用于将之前加载好的view缓存</span></span><br><span class="line">        ViewHolder holder = <span class="keyword">null</span>;</span><br><span class="line">        View view;</span><br><span class="line">        Student student = (Student) getItem(position);</span><br><span class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            holder = <span class="keyword">new</span> ViewHolder();</span><br><span class="line"></span><br><span class="line">            view = LayoutInflater.from(mcontext).inflate(mresourceId, <span class="keyword">null</span>);</span><br><span class="line">            holder.id = (TextView) view.findViewById(R.id.id);</span><br><span class="line">            holder.name = (TextView) view.findViewById(R.id.name);</span><br><span class="line">            holder.age = (TextView) view.findViewById(R.id.age);</span><br><span class="line">            view.setTag(holder);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            view = convertView;</span><br><span class="line">            holder = (ViewHolder) view.getTag();</span><br><span class="line">        &#125;</span><br><span class="line">        holder.id.setText(<span class="string">"id"</span> + student.getId().toString());</span><br><span class="line">        holder.name.setText(<span class="string">"name"</span> + student.getName());</span><br><span class="line">        holder.age.setText(<span class="string">"age"</span> + student.getAge());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        TextView id;</span><br><span class="line">        TextView name;</span><br><span class="line">        TextView age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用holder可以大大加快程序效率，避免重复加载。</p>
<h3 id="自定义loader">自定义loader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xuyushi.loadertest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.AsyncTaskLoader;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.content.Loader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.greenrobot.DBHelper;</span><br><span class="line"><span class="keyword">import</span> de.greenrobot.daoexample.Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by xuyushi on 15/7/5.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentLoader</span> <span class="keyword">extends</span> <span class="title">AsyncTaskLoader</span>&lt;<span class="title">List</span>&lt;<span class="title">Student</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; mdata;</span><br><span class="line">    <span class="keyword">final</span> ForceLoadContentObserver mObserver ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentLoader</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        mObserver = <span class="keyword">new</span> ForceLoadContentObserver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">loadInBackground</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            mdata =  DBHelper.getInstance(getContext()).getStudent();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mdata;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliverResult</span><span class="params">(List&lt;Student&gt; data)</span> </span>&#123;</span><br><span class="line">        mdata = data;</span><br><span class="line">        <span class="keyword">if</span> (isStarted()) &#123;</span><br><span class="line">            <span class="keyword">super</span>.deliverResult(data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStartLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStartLoading();</span><br><span class="line">        <span class="keyword">if</span> (mdata != <span class="keyword">null</span>) &#123;</span><br><span class="line">            deliverResult(mdata);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mdata == <span class="keyword">null</span>) &#123;</span><br><span class="line">            forceLoad();</span><br><span class="line">        &#125;</span><br><span class="line">        DBHelper.getInstance(getContext()).registerObserver(mObserver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCanceled</span><span class="params">(List&lt;Student&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCanceled(data);</span><br><span class="line">        cancelLoad();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onReset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onReset();</span><br><span class="line">        onStopLoading();</span><br><span class="line">        <span class="keyword">if</span> (mdata != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            mdata = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>onStartLoading：注册一些监听器到loader上，并且执行一次forceLoad(); 否则loader不会开始工作</li>
<li>loadInBackground：加载数据并且返回，其实这个数据就返回到了回调函数中LoaderManager的onLoadFinished方法第二个data参数</li>
<li>onStopLoading：停止加载数据，但不要停止监听也不要释放数据，就可以随时重启loader</li>
<li>onReset：先确保已经停止加载数据了，然后释放掉监听器并设为null</li>
<li>onCanceled： 在这里可以释放资源，如果是list就不需要做什么了，但是象cursor或者打开了什么文件就应该关闭一下</li>
</ul>
<h3 id="fragment">fragment</h3><p>继承fragmentlist ，并实现 LoaderManager.LoaderCallbacks方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by xuyushi on 15/7/5.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fragment1</span> <span class="keyword">extends</span> <span class="title">ListFragment</span> <span class="keyword">implements</span></span><br><span class="line">        <span class="title">LoaderManager</span>.<span class="title">LoaderCallbacks</span>&lt;<span class="title">List</span>&lt;<span class="title">Student</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StudentAdapter mAdapter;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; mStudents;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater,</span><br><span class="line">                             ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment1, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">//在fragment中获取context的方法getActivity().getApplicationContext()</span></span><br><span class="line">        <span class="comment">//设置list的Adapter</span></span><br><span class="line"><span class="comment">//        setListAdapter(new StudentAdapter(getActivity().getApplicationContext(),</span></span><br><span class="line"><span class="comment">//                R.layout.student_adpter,</span></span><br><span class="line"><span class="comment">//                DBHelper.getInstance(getActivity().getApplicationContext()).getStudent()));</span></span><br><span class="line">        mStudents = DBHelper.getInstance(getActivity().getApplicationContext()).getStudent();</span><br><span class="line">        mAdapter = <span class="keyword">new</span> StudentAdapter(getActivity().getApplicationContext(),</span><br><span class="line">                R.layout.student_adpter,</span><br><span class="line">                mStudents);</span><br><span class="line">        setListAdapter(mAdapter);</span><br><span class="line">        getLoaderManager().initLoader(<span class="number">2</span>, <span class="keyword">null</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onListItemClick</span><span class="params">(ListView parent, View v,</span><br><span class="line">                                <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Toast.makeText(getActivity(),</span></span><br><span class="line"><span class="comment">//                "You have selected " + presidents[position],</span></span><br><span class="line"><span class="comment">//                Toast.LENGTH_SHORT).show();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//回调函数</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Loader&lt;List&lt;Student&gt;&gt; onCreateLoader(<span class="keyword">int</span> id, Bundle args) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StudentLoader(getActivity().getApplicationContext());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFinished</span><span class="params">(Loader&lt;List&lt;Student&gt;&gt; loader, List&lt;Student&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != mAdapter) &#123;</span><br><span class="line">            mStudents.clear();</span><br><span class="line">            mStudents.addAll(DBHelper.getInstance(getActivity().getApplicationContext()).getStudent());</span><br><span class="line">            mAdapter.notifyDataSetChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoaderReset</span><span class="params">(Loader&lt;List&lt;Student&gt;&gt; loader)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>onLoadFinished:中的第二个参数，即loader在doinbackfround的返回值</li>
</ul>
<blockquote>
<p>注：在调试中发现虽然 mStudents 的数据刷新了，但是直接调用 mAdapter.notifyDataSetChanged();并不能刷新界面。<br>原因是:mAdapter会通过mStudents获取数据库中的内容。但是实际上可能是，在调用super(MyActivity.this, R.layout.item, usersList)时mAdapter保存了指向原数据库的引用，在调用query函数之后，mstudent指向了一个新的List（List b）。但是在调用notifyDataSetChanged()时，mAdapter会跟据保存的引用（即指向List a的引用）去更新，因此当然还是原来的结果，不会进行更新。</p>
</blockquote>
<p>所以有以下修改<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mStudents.clear();           mStudents.addAll(DBHelper.getInstance(getActivity().getApplicationContext()).getStudent());</span><br><span class="line">            mAdapter.notifyDataSetChanged();</span><br></pre></td></tr></table></figure></p>
<h3 id="contentobserver监听数据库">contentobserver监听数据库</h3><p>通过contentobserver可以实时的更新数据库中的信息，无需去轮询。</p>
<h4 id="在StudentLoader中注册contentobserver">在StudentLoader中注册contentobserver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStartLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onStartLoading();</span><br><span class="line">    <span class="keyword">if</span> (mdata != <span class="keyword">null</span>) &#123;</span><br><span class="line">        deliverResult(mdata);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mdata == <span class="keyword">null</span>) &#123;</span><br><span class="line">        forceLoad();</span><br><span class="line">    &#125;</span><br><span class="line">    DBHelper.getInstance(getContext()).registerObserver(mObserver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="DBHelper中">DBHelper中</h4><h5 id="定义mObserver">定义mObserver</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Loader.ForceLoadContentObserver mObserver;</span><br></pre></td></tr></table></figure>
<h5 id="实现注册函数registerObserver">实现注册函数registerObserver</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Loader&lt;List&lt;Student&gt;&gt;.ForceLoadContentObserver Observer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mObserver = Observer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>即把变量取出</p>
<h5 id="在数据库改变的地方发出通知">在数据库改变的地方发出通知</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addToStudentTable</span><span class="params">(de.greenrobot.daoexample.Student student)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == Student) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == student) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Student.insert(student);</span><br><span class="line">    <span class="keyword">if</span> (mObserver!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        mObserver.onChange(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>mObserver.onChange(true);</code>发出通知</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h2 id="本文实现的功能">本文实现的功能</h2><p>在listfragment使用自定义的adpter现实数据库的数据，当数据库的数据发生变化时，自动刷新</p>
<p>效果如下<br><img src="https://raw.githubusercontent.com/xuyushi/Blog_img/master/loader1.gif" alt="loader"><br>]]>
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="greendao" scheme="http://yoursite.com/tags/greendao/"/>
    
      <category term="loader" scheme="http://yoursite.com/tags/loader/"/>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用命令行查看android sqlite数据库]]></title>
    <link href="http://yoursite.com/2015/07/05/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%9F%A5%E7%9C%8Bandroid%20sqlite%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2015/07/05/使用命令行查看android sqlite数据库/</id>
    <published>2015-07-05T01:33:00.000Z</published>
    <updated>2016-02-03T03:46:27.000Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<p>记录如何使用命令行快速查看数据库<br><a id="more"></a></p>
<h2 id="首先adb_shell连接虚拟机或者设备">首先adb shell连接虚拟机或者设备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell</span><br></pre></td></tr></table></figure>
<h2 id="进入数据库目录">进入数据库目录</h2><p>通常在/data/data/包名/databases 下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /data/data/com.example.xuyushi.loadertest/databases</span><br></pre></td></tr></table></figure></p>
<h2 id="进入数据库">进入数据库</h2><p>使用sqlite3 进入，需要安装工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sqlite3 xxxx</span><br></pre></td></tr></table></figure></p>
<p>提示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SQLite version <span class="number">3.7</span>.<span class="number">11</span> <span class="number">2012</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">11</span>:<span class="number">35</span>:<span class="number">50</span></span><br><span class="line">Enter <span class="string">".help"</span> <span class="keyword">for</span> instructions</span><br><span class="line">Enter SQL statements terminated with a <span class="string">";"</span></span><br><span class="line">sqlite&gt;</span><br></pre></td></tr></table></figure></p>
<p>使用<code>.help</code>可以查看帮助</p>
<h2 id="使用-table查看已建的表格">使用.table查看已建的表格</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .table</span><br></pre></td></tr></table></figure>
<p>提示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt; .table</span><br><span class="line">STUDENT           android_metadata</span><br></pre></td></tr></table></figure></p>
<h2 id="使用SELECT查看表内容">使用SELECT查看表内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ SELECT * FROM STUDENT;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意有分号</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sqlite&gt; SELECT * FROM STUDENT;</span><br><span class="line"><span class="number">1</span>|zhangsan|<span class="number">22</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<p>记录如何使用命令行快速查看数据库<br>]]>
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="greendao" scheme="http://yoursite.com/tags/greendao/"/>
    
      <category term="sqlite" scheme="http://yoursite.com/tags/sqlite/"/>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Aidl 总结]]></title>
    <link href="http://yoursite.com/2015/07/04/aidl%20%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2015/07/04/aidl 学习/</id>
    <published>2015-07-04T08:25:00.000Z</published>
    <updated>2016-02-03T03:46:35.000Z</updated>
    <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="AIDL_学习">AIDL 学习</h1><h2 id="AIDL的作用">AIDL的作用</h2><p>AIDL (Android Interface Definition Language) 是一种IDL 语言，用于生成可以在Android设备上两个进程之间进行进程间通信(interprocess communication, IPC)的代码。如果在一个进程中（例如Activity）要调用另一个进程中（例如Service）对象的操作，就可以使用AIDL生成可序列化的参数。</p>
<h2 id="选择AIDL的使用场合">选择AIDL的使用场合</h2><p>官方文档特别提醒我们何时使用AIDL是必要的：只有你允许客户端从不同的应用程序为了进程间的通信而去访问你的service，以及想在你的service处理多线程。</p>
<p>如果不需要进行不同应用程序间的并发通信(IPC)，you should create your interface by implementing a Binder；或者你想进行IPC，但不需要处理多线程的，则implement your interface using a Messenger。</p>
<h2 id="如何使用AIDL">如何使用AIDL</h2><h3 id="先建立一个android工程，用作服务端">先建立一个android工程，用作服务端</h3><p>创建一个android工程，用来充当跨进程通信的服务端。</p>
<h3 id="2-创建一个包名用来存放aidl文件">2.创建一个包名用来存放aidl文件</h3><p>创建一个包名用来存放aidl文件，在里面新建IMyService.aidl文件，如果需要访问自定义对象，还需要建立对象的aidl文件，这里我们由于使用了自定义对象Student，所以，还需要创建Student.aidl和Student.java。注意，这三个文件，需要都放在aidl文件夹下com.example.xuyushi.aidltest包里。下面描述如何写这三个文件。</p>
<a id="more"></a>
<h4 id="在android_studio中如何编译-aidl文件生成-java文件（重要）">在android studio中如何编译.aidl文件生成.java文件（重要）</h4><ol>
<li>在app-&gt;src-&gt;main目录下新建aidl文件夹，注意 在android工程下不显示，需要切换到Project。</li>
<li>==在aidl新建package。包名需要与AndroidManifest.xml中的包名一致==</li>
<li><p>在 新建.aidl文件，注意打包的报名与上面一致</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xuyushi.aidltest;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMyService</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在app-&gt;build-&gt;generated-&gt;source-&gt;aidl。中会生成IMyService.java</p>
</li>
</ol>
<h4 id="IMyService-aidl如下">IMyService.aidl如下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xuyushi.aidltest;</span><br><span class="line"><span class="keyword">import</span> com.example.xuyushi.aidltest.Student;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMyService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">getStudent</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(in Student student)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>aidl中支持的参数类型为：基本类型（int,long,char,boolean等）,String,CharSequence,List,Map，其他类型必须使用import导入，即使它们可能在同一个包里，比如上面的Student，尽管它和IMyService在同一个包中，但是还是需要显示的import进来。<br>另外，接口中的参数除了aidl支持的类型，其他类型必须标识其方向：到底是输入还是输出抑或两者兼之，用in，out或者inout来表示，上面的代码我们用in标记，因为它是输入型参数。<br>在gen下面可以看到，eclipse为我们自动生成了一个代理类<br>public static abstract class Stub extends android.os.Binder implements com.ryg.sayhi.aidl.IMyService<br>可见这个Stub类就是一个普通的Binder，只不过它实现了我们定义的aidl接口。它还有一个静态方法<br>public static com.ryg.sayhi.aidl.IMyService asInterface(android.os.IBinder obj)<br>这个方法很有用，通过它，我们就可以在客户端中得到IMyService的实例，进而通过实例来调用其方法。</p>
<h4 id="Student-aidl代码">Student.aidl代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xuyushi.aidltest;</span><br><span class="line"></span><br><span class="line">parcelabl</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里parcelable是个类型，首字母是小写的，和Parcelable接口不是一个东西，要注意。</p>
</blockquote>
<h4 id="Student-java">Student.java</h4><p>==Student.java不要建在aidl文件夹中，在com.example.xuyushi.aidltest和MainActivity一起即可==<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.xuyushi.aidltest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by xuyushi on 15/7/4.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Parcel;</span><br><span class="line"><span class="keyword">import</span> android.os.Parcelable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SEX_MALE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SEX_FEMALE = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sno;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> sex;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Student&gt; CREATOR = <span class="keyword">new</span></span><br><span class="line">            Parcelable.Creator&lt;Student&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Student <span class="title">createFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Student(in);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> Student[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Student[size];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Student</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">        readFromParcel(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        dest.writeInt(sno);</span><br><span class="line">        dest.writeString(name);</span><br><span class="line">        dest.writeInt(sex);</span><br><span class="line">        dest.writeInt(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFromParcel</span><span class="params">(Parcel in)</span> </span>&#123;</span><br><span class="line">        sno = in.readInt();</span><br><span class="line">        name = in.readString();</span><br><span class="line">        sex = in.readInt();</span><br><span class="line">        age = in.readInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(Locale.ENGLISH, <span class="string">"Student[ %d, %s, %d, %d ]"</span>, sno, name, sex, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="创建服务端service">创建服务端service</h3><p>创建一个service，比如名为MyService.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>说明：通过AIDL传输非基本类型的对象，被传输的对象需要序列化，序列化功能java有提供，但是android sdk提供了更轻量级更方便的方法，即实现Parcelable接口，关于android的序列化，我会在以后写文章介绍。这里只要简单理解一下就行，大意是要实现如下函数<br>readFromParcel : 从parcel中读取对象<br>writeToParcel ：将对象写入parcel<br>describeContents：返回0即可<br>Parcelable.Creator<student> CREATOR：这个照着上面的代码抄就可以<br>需要注意的是，readFromParcel和writeToParcel操作数据成员的顺序要一致</student></p>
<h4 id="在AndroidMenifest中声明service">在AndroidMenifest中声明service</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">service</span>  </span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">"com.ryg.sayhi.MyService"</span>  </span><br><span class="line">    <span class="attribute">android:process</span>=<span class="value">":remote"</span>  </span><br><span class="line">    <span class="attribute">android:exported</span>=<span class="value">"true"</span> &gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.DEFAULT"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"com.ryg.sayhi.MyService"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">service</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>说明：上述的 <action android:name="com.ryg.sayhi.MyService">是为了能让其他apk隐式bindService，通过隐式调用的方式来起activity或者service，需要把category设为default，这是因为，隐式调用的时候，intent中的category默认会被设置为default。</action></p>
<h1 id="待续">待续</h1><h2 id="参考">参考</h2><blockquote>
<p><a href="http://android.blog.51cto.com/268543/537684/" target="_blank" rel="external">http://android.blog.51cto.com/268543/537684/</a><br><a href="http://blog.csdn.net/singwhatiwanna/article/details/17041691" target="_blank" rel="external">http://blog.csdn.net/singwhatiwanna/article/details/17041691</a><br><a href="http://developer.android.com/guide/components/aidl.html" target="_blank" rel="external">http://developer.android.com/guide/components/aidl.html</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>[TOC]</p>
<h1 id="AIDL_学习">AIDL 学习</h1><h2 id="AIDL的作用">AIDL的作用</h2><p>AIDL (Android Interface Definition Language) 是一种IDL 语言，用于生成可以在Android设备上两个进程之间进行进程间通信(interprocess communication, IPC)的代码。如果在一个进程中（例如Activity）要调用另一个进程中（例如Service）对象的操作，就可以使用AIDL生成可序列化的参数。</p>
<h2 id="选择AIDL的使用场合">选择AIDL的使用场合</h2><p>官方文档特别提醒我们何时使用AIDL是必要的：只有你允许客户端从不同的应用程序为了进程间的通信而去访问你的service，以及想在你的service处理多线程。</p>
<p>如果不需要进行不同应用程序间的并发通信(IPC)，you should create your interface by implementing a Binder；或者你想进行IPC，但不需要处理多线程的，则implement your interface using a Messenger。</p>
<h2 id="如何使用AIDL">如何使用AIDL</h2><h3 id="先建立一个android工程，用作服务端">先建立一个android工程，用作服务端</h3><p>创建一个android工程，用来充当跨进程通信的服务端。</p>
<h3 id="2-创建一个包名用来存放aidl文件">2.创建一个包名用来存放aidl文件</h3><p>创建一个包名用来存放aidl文件，在里面新建IMyService.aidl文件，如果需要访问自定义对象，还需要建立对象的aidl文件，这里我们由于使用了自定义对象Student，所以，还需要创建Student.aidl和Student.java。注意，这三个文件，需要都放在aidl文件夹下com.example.xuyushi.aidltest包里。下面描述如何写这三个文件。</p>]]>
    
    </summary>
    
      <category term="Aidl" scheme="http://yoursite.com/tags/Aidl/"/>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
  </entry>
  
</feed>